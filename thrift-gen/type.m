/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import <TProtocol.h>
#import <TApplicationException.h>
#import <TProtocolUtil.h>
#import <TProcessor.h>


#import "type.h"

@implementation Auth

- (id) initWithUser: (NSString *) user password: (NSString *) password clientKey: (NSString *) clientKey clientSecret: (NSString *) clientSecret
{
  self = [super init];
  __user = [user retain];
  __user_isset = YES;
  __password = [password retain];
  __password_isset = YES;
  __clientKey = [clientKey retain];
  __clientKey_isset = YES;
  __clientSecret = [clientSecret retain];
  __clientSecret_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"user"])
  {
    __user = [[decoder decodeObjectForKey: @"user"] retain];
    __user_isset = YES;
  }
  if ([decoder containsValueForKey: @"password"])
  {
    __password = [[decoder decodeObjectForKey: @"password"] retain];
    __password_isset = YES;
  }
  if ([decoder containsValueForKey: @"clientKey"])
  {
    __clientKey = [[decoder decodeObjectForKey: @"clientKey"] retain];
    __clientKey_isset = YES;
  }
  if ([decoder containsValueForKey: @"clientSecret"])
  {
    __clientSecret = [[decoder decodeObjectForKey: @"clientSecret"] retain];
    __clientSecret_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__user_isset)
  {
    [encoder encodeObject: __user forKey: @"user"];
  }
  if (__password_isset)
  {
    [encoder encodeObject: __password forKey: @"password"];
  }
  if (__clientKey_isset)
  {
    [encoder encodeObject: __clientKey forKey: @"clientKey"];
  }
  if (__clientSecret_isset)
  {
    [encoder encodeObject: __clientSecret forKey: @"clientSecret"];
  }
}

- (void) dealloc
{
  [__user release];
  [__password release];
  [__clientKey release];
  [__clientSecret release];
  [super dealloc];
}

- (NSString *) user {
  return [[__user retain] autorelease];
}

- (void) setUser: (NSString *) user {
  [user retain];
  [__user release];
  __user = user;
  __user_isset = YES;
}

- (BOOL) userIsSet {
  return __user_isset;
}

- (void) unsetUser {
  [__user release];
  __user = nil;
  __user_isset = NO;
}

- (NSString *) password {
  return [[__password retain] autorelease];
}

- (void) setPassword: (NSString *) password {
  [password retain];
  [__password release];
  __password = password;
  __password_isset = YES;
}

- (BOOL) passwordIsSet {
  return __password_isset;
}

- (void) unsetPassword {
  [__password release];
  __password = nil;
  __password_isset = NO;
}

- (NSString *) clientKey {
  return [[__clientKey retain] autorelease];
}

- (void) setClientKey: (NSString *) clientKey {
  [clientKey retain];
  [__clientKey release];
  __clientKey = clientKey;
  __clientKey_isset = YES;
}

- (BOOL) clientKeyIsSet {
  return __clientKey_isset;
}

- (void) unsetClientKey {
  [__clientKey release];
  __clientKey = nil;
  __clientKey_isset = NO;
}

- (NSString *) clientSecret {
  return [[__clientSecret retain] autorelease];
}

- (void) setClientSecret: (NSString *) clientSecret {
  [clientSecret retain];
  [__clientSecret release];
  __clientSecret = clientSecret;
  __clientSecret_isset = YES;
}

- (BOOL) clientSecretIsSet {
  return __clientSecret_isset;
}

- (void) unsetClientSecret {
  [__clientSecret release];
  __clientSecret = nil;
  __clientSecret_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUser: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPassword: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setClientKey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setClientSecret: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Auth"];
  if (__user_isset) {
    if (__user != nil) {
      [outProtocol writeFieldBeginWithName: @"user" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __user];
      [outProtocol writeFieldEnd];
    }
  }
  if (__password_isset) {
    if (__password != nil) {
      [outProtocol writeFieldBeginWithName: @"password" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __password];
      [outProtocol writeFieldEnd];
    }
  }
  if (__clientKey_isset) {
    if (__clientKey != nil) {
      [outProtocol writeFieldBeginWithName: @"clientKey" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __clientKey];
      [outProtocol writeFieldEnd];
    }
  }
  if (__clientSecret_isset) {
    if (__clientSecret != nil) {
      [outProtocol writeFieldBeginWithName: @"clientSecret" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __clientSecret];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Auth("];
  [ms appendString: @"user:"];
  [ms appendFormat: @"\"%@\"", __user];
  [ms appendString: @",password:"];
  [ms appendFormat: @"\"%@\"", __password];
  [ms appendString: @",clientKey:"];
  [ms appendFormat: @"\"%@\"", __clientKey];
  [ms appendString: @",clientSecret:"];
  [ms appendFormat: @"\"%@\"", __clientSecret];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AuthResponse

- (id) initWithStatus: (int) status id: (int64_t) id name: (NSString *) name accessToken: (NSString *) accessToken expireDate: (int64_t) expireDate refreshToken: (NSString *) refreshToken
{
  self = [super init];
  __status = status;
  __status_isset = YES;
  __id = id;
  __id_isset = YES;
  __name = [name retain];
  __name_isset = YES;
  __accessToken = [accessToken retain];
  __accessToken_isset = YES;
  __expireDate = expireDate;
  __expireDate_isset = YES;
  __refreshToken = [refreshToken retain];
  __refreshToken_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"status"])
  {
    __status = [decoder decodeIntForKey: @"status"];
    __status_isset = YES;
  }
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt64ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"accessToken"])
  {
    __accessToken = [[decoder decodeObjectForKey: @"accessToken"] retain];
    __accessToken_isset = YES;
  }
  if ([decoder containsValueForKey: @"expireDate"])
  {
    __expireDate = [decoder decodeInt64ForKey: @"expireDate"];
    __expireDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"refreshToken"])
  {
    __refreshToken = [[decoder decodeObjectForKey: @"refreshToken"] retain];
    __refreshToken_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__status_isset)
  {
    [encoder encodeInt: __status forKey: @"status"];
  }
  if (__id_isset)
  {
    [encoder encodeInt64: __id forKey: @"id"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__accessToken_isset)
  {
    [encoder encodeObject: __accessToken forKey: @"accessToken"];
  }
  if (__expireDate_isset)
  {
    [encoder encodeInt64: __expireDate forKey: @"expireDate"];
  }
  if (__refreshToken_isset)
  {
    [encoder encodeObject: __refreshToken forKey: @"refreshToken"];
  }
}

- (void) dealloc
{
  [__name release];
  [__accessToken release];
  [__refreshToken release];
  [super dealloc];
}

- (int) status {
  return __status;
}

- (void) setStatus: (int) status {
  __status = status;
  __status_isset = YES;
}

- (BOOL) statusIsSet {
  return __status_isset;
}

- (void) unsetStatus {
  __status_isset = NO;
}

- (int64_t) id {
  return __id;
}

- (void) setId: (int64_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (NSString *) name {
  return [[__name retain] autorelease];
}

- (void) setName: (NSString *) name {
  [name retain];
  [__name release];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) accessToken {
  return [[__accessToken retain] autorelease];
}

- (void) setAccessToken: (NSString *) accessToken {
  [accessToken retain];
  [__accessToken release];
  __accessToken = accessToken;
  __accessToken_isset = YES;
}

- (BOOL) accessTokenIsSet {
  return __accessToken_isset;
}

- (void) unsetAccessToken {
  [__accessToken release];
  __accessToken = nil;
  __accessToken_isset = NO;
}

- (int64_t) expireDate {
  return __expireDate;
}

- (void) setExpireDate: (int64_t) expireDate {
  __expireDate = expireDate;
  __expireDate_isset = YES;
}

- (BOOL) expireDateIsSet {
  return __expireDate_isset;
}

- (void) unsetExpireDate {
  __expireDate_isset = NO;
}

- (NSString *) refreshToken {
  return [[__refreshToken retain] autorelease];
}

- (void) setRefreshToken: (NSString *) refreshToken {
  [refreshToken retain];
  [__refreshToken release];
  __refreshToken = refreshToken;
  __refreshToken_isset = YES;
}

- (BOOL) refreshTokenIsSet {
  return __refreshToken_isset;
}

- (void) unsetRefreshToken {
  [__refreshToken release];
  __refreshToken = nil;
  __refreshToken_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAccessToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setExpireDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRefreshToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AuthResponse"];
  if (__status_isset) {
    [outProtocol writeFieldBeginWithName: @"status" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __status];
    [outProtocol writeFieldEnd];
  }
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __id];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__accessToken_isset) {
    if (__accessToken != nil) {
      [outProtocol writeFieldBeginWithName: @"accessToken" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __accessToken];
      [outProtocol writeFieldEnd];
    }
  }
  if (__expireDate_isset) {
    [outProtocol writeFieldBeginWithName: @"expireDate" type: TType_I64 fieldID: 5];
    [outProtocol writeI64: __expireDate];
    [outProtocol writeFieldEnd];
  }
  if (__refreshToken_isset) {
    if (__refreshToken != nil) {
      [outProtocol writeFieldBeginWithName: @"refreshToken" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __refreshToken];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AuthResponse("];
  [ms appendString: @"status:"];
  [ms appendFormat: @"%i", __status];
  [ms appendString: @",id:"];
  [ms appendFormat: @"%qi", __id];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",accessToken:"];
  [ms appendFormat: @"\"%@\"", __accessToken];
  [ms appendString: @",expireDate:"];
  [ms appendFormat: @"%qi", __expireDate];
  [ms appendString: @",refreshToken:"];
  [ms appendFormat: @"\"%@\"", __refreshToken];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation UserLink

- (id) initWithId: (int64_t) id type: (int) type value: (NSString *) value label: (NSString *) label
{
  self = [super init];
  __id = id;
  __id_isset = YES;
  __type = type;
  __type_isset = YES;
  __value = [value retain];
  __value_isset = YES;
  __label = [label retain];
  __label_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt64ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [decoder decodeIntForKey: @"type"];
    __type_isset = YES;
  }
  if ([decoder containsValueForKey: @"value"])
  {
    __value = [[decoder decodeObjectForKey: @"value"] retain];
    __value_isset = YES;
  }
  if ([decoder containsValueForKey: @"label"])
  {
    __label = [[decoder decodeObjectForKey: @"label"] retain];
    __label_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeInt64: __id forKey: @"id"];
  }
  if (__type_isset)
  {
    [encoder encodeInt: __type forKey: @"type"];
  }
  if (__value_isset)
  {
    [encoder encodeObject: __value forKey: @"value"];
  }
  if (__label_isset)
  {
    [encoder encodeObject: __label forKey: @"label"];
  }
}

- (void) dealloc
{
  [__value release];
  [__label release];
  [super dealloc];
}

- (int64_t) id {
  return __id;
}

- (void) setId: (int64_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (int) type {
  return __type;
}

- (void) setType: (int) type {
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  __type_isset = NO;
}

- (NSString *) value {
  return [[__value retain] autorelease];
}

- (void) setValue: (NSString *) value {
  [value retain];
  [__value release];
  __value = value;
  __value_isset = YES;
}

- (BOOL) valueIsSet {
  return __value_isset;
}

- (void) unsetValue {
  [__value release];
  __value = nil;
  __value_isset = NO;
}

- (NSString *) label {
  return [[__label retain] autorelease];
}

- (void) setLabel: (NSString *) label {
  [label retain];
  [__label release];
  __label = label;
  __label_isset = YES;
}

- (BOOL) labelIsSet {
  return __label_isset;
}

- (void) unsetLabel {
  [__label release];
  __label = nil;
  __label_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setValue: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLabel: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"UserLink"];
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __id];
    [outProtocol writeFieldEnd];
  }
  if (__type_isset) {
    [outProtocol writeFieldBeginWithName: @"type" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __type];
    [outProtocol writeFieldEnd];
  }
  if (__value_isset) {
    if (__value != nil) {
      [outProtocol writeFieldBeginWithName: @"value" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __value];
      [outProtocol writeFieldEnd];
    }
  }
  if (__label_isset) {
    if (__label != nil) {
      [outProtocol writeFieldBeginWithName: @"label" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __label];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"UserLink("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%qi", __id];
  [ms appendString: @",type:"];
  [ms appendFormat: @"%i", __type];
  [ms appendString: @",value:"];
  [ms appendFormat: @"\"%@\"", __value];
  [ms appendString: @",label:"];
  [ms appendFormat: @"\"%@\"", __label];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation UserPhone

- (id) initWithId: (int64_t) id type: (int) type value: (NSString *) value label: (NSString *) label
{
  self = [super init];
  __id = id;
  __id_isset = YES;
  __type = type;
  __type_isset = YES;
  __value = [value retain];
  __value_isset = YES;
  __label = [label retain];
  __label_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt64ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [decoder decodeIntForKey: @"type"];
    __type_isset = YES;
  }
  if ([decoder containsValueForKey: @"value"])
  {
    __value = [[decoder decodeObjectForKey: @"value"] retain];
    __value_isset = YES;
  }
  if ([decoder containsValueForKey: @"label"])
  {
    __label = [[decoder decodeObjectForKey: @"label"] retain];
    __label_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeInt64: __id forKey: @"id"];
  }
  if (__type_isset)
  {
    [encoder encodeInt: __type forKey: @"type"];
  }
  if (__value_isset)
  {
    [encoder encodeObject: __value forKey: @"value"];
  }
  if (__label_isset)
  {
    [encoder encodeObject: __label forKey: @"label"];
  }
}

- (void) dealloc
{
  [__value release];
  [__label release];
  [super dealloc];
}

- (int64_t) id {
  return __id;
}

- (void) setId: (int64_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (int) type {
  return __type;
}

- (void) setType: (int) type {
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  __type_isset = NO;
}

- (NSString *) value {
  return [[__value retain] autorelease];
}

- (void) setValue: (NSString *) value {
  [value retain];
  [__value release];
  __value = value;
  __value_isset = YES;
}

- (BOOL) valueIsSet {
  return __value_isset;
}

- (void) unsetValue {
  [__value release];
  __value = nil;
  __value_isset = NO;
}

- (NSString *) label {
  return [[__label retain] autorelease];
}

- (void) setLabel: (NSString *) label {
  [label retain];
  [__label release];
  __label = label;
  __label_isset = YES;
}

- (BOOL) labelIsSet {
  return __label_isset;
}

- (void) unsetLabel {
  [__label release];
  __label = nil;
  __label_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setValue: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLabel: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"UserPhone"];
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __id];
    [outProtocol writeFieldEnd];
  }
  if (__type_isset) {
    [outProtocol writeFieldBeginWithName: @"type" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __type];
    [outProtocol writeFieldEnd];
  }
  if (__value_isset) {
    if (__value != nil) {
      [outProtocol writeFieldBeginWithName: @"value" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __value];
      [outProtocol writeFieldEnd];
    }
  }
  if (__label_isset) {
    if (__label != nil) {
      [outProtocol writeFieldBeginWithName: @"label" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __label];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"UserPhone("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%qi", __id];
  [ms appendString: @",type:"];
  [ms appendFormat: @"%i", __type];
  [ms appendString: @",value:"];
  [ms appendFormat: @"\"%@\"", __value];
  [ms appendString: @",label:"];
  [ms appendFormat: @"\"%@\"", __label];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation UserMail

- (id) initWithId: (int64_t) id type: (int) type value: (NSString *) value label: (NSString *) label
{
  self = [super init];
  __id = id;
  __id_isset = YES;
  __type = type;
  __type_isset = YES;
  __value = [value retain];
  __value_isset = YES;
  __label = [label retain];
  __label_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt64ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [decoder decodeIntForKey: @"type"];
    __type_isset = YES;
  }
  if ([decoder containsValueForKey: @"value"])
  {
    __value = [[decoder decodeObjectForKey: @"value"] retain];
    __value_isset = YES;
  }
  if ([decoder containsValueForKey: @"label"])
  {
    __label = [[decoder decodeObjectForKey: @"label"] retain];
    __label_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeInt64: __id forKey: @"id"];
  }
  if (__type_isset)
  {
    [encoder encodeInt: __type forKey: @"type"];
  }
  if (__value_isset)
  {
    [encoder encodeObject: __value forKey: @"value"];
  }
  if (__label_isset)
  {
    [encoder encodeObject: __label forKey: @"label"];
  }
}

- (void) dealloc
{
  [__value release];
  [__label release];
  [super dealloc];
}

- (int64_t) id {
  return __id;
}

- (void) setId: (int64_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (int) type {
  return __type;
}

- (void) setType: (int) type {
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  __type_isset = NO;
}

- (NSString *) value {
  return [[__value retain] autorelease];
}

- (void) setValue: (NSString *) value {
  [value retain];
  [__value release];
  __value = value;
  __value_isset = YES;
}

- (BOOL) valueIsSet {
  return __value_isset;
}

- (void) unsetValue {
  [__value release];
  __value = nil;
  __value_isset = NO;
}

- (NSString *) label {
  return [[__label retain] autorelease];
}

- (void) setLabel: (NSString *) label {
  [label retain];
  [__label release];
  __label = label;
  __label_isset = YES;
}

- (BOOL) labelIsSet {
  return __label_isset;
}

- (void) unsetLabel {
  [__label release];
  __label = nil;
  __label_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setValue: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLabel: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"UserMail"];
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __id];
    [outProtocol writeFieldEnd];
  }
  if (__type_isset) {
    [outProtocol writeFieldBeginWithName: @"type" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __type];
    [outProtocol writeFieldEnd];
  }
  if (__value_isset) {
    if (__value != nil) {
      [outProtocol writeFieldBeginWithName: @"value" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __value];
      [outProtocol writeFieldEnd];
    }
  }
  if (__label_isset) {
    if (__label != nil) {
      [outProtocol writeFieldBeginWithName: @"label" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __label];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"UserMail("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%qi", __id];
  [ms appendString: @",type:"];
  [ms appendFormat: @"%i", __type];
  [ms appendString: @",value:"];
  [ms appendFormat: @"\"%@\"", __value];
  [ms appendString: @",label:"];
  [ms appendFormat: @"\"%@\"", __label];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation UserInfo

- (id) initWithId: (int64_t) id name: (NSString *) name intro: (NSString *) intro picture: (NSData *) picture userLinkList: (NSArray *) userLinkList userPhoneList: (NSArray *) userPhoneList userMailList: (NSArray *) userMailList
{
  self = [super init];
  __id = id;
  __id_isset = YES;
  __name = [name retain];
  __name_isset = YES;
  __intro = [intro retain];
  __intro_isset = YES;
  __picture = [picture retain];
  __picture_isset = YES;
  __userLinkList = [userLinkList retain];
  __userLinkList_isset = YES;
  __userPhoneList = [userPhoneList retain];
  __userPhoneList_isset = YES;
  __userMailList = [userMailList retain];
  __userMailList_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt64ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"intro"])
  {
    __intro = [[decoder decodeObjectForKey: @"intro"] retain];
    __intro_isset = YES;
  }
  if ([decoder containsValueForKey: @"picture"])
  {
    __picture = [[decoder decodeObjectForKey: @"picture"] retain];
    __picture_isset = YES;
  }
  if ([decoder containsValueForKey: @"userLinkList"])
  {
    __userLinkList = [[decoder decodeObjectForKey: @"userLinkList"] retain];
    __userLinkList_isset = YES;
  }
  if ([decoder containsValueForKey: @"userPhoneList"])
  {
    __userPhoneList = [[decoder decodeObjectForKey: @"userPhoneList"] retain];
    __userPhoneList_isset = YES;
  }
  if ([decoder containsValueForKey: @"userMailList"])
  {
    __userMailList = [[decoder decodeObjectForKey: @"userMailList"] retain];
    __userMailList_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeInt64: __id forKey: @"id"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__intro_isset)
  {
    [encoder encodeObject: __intro forKey: @"intro"];
  }
  if (__picture_isset)
  {
    [encoder encodeObject: __picture forKey: @"picture"];
  }
  if (__userLinkList_isset)
  {
    [encoder encodeObject: __userLinkList forKey: @"userLinkList"];
  }
  if (__userPhoneList_isset)
  {
    [encoder encodeObject: __userPhoneList forKey: @"userPhoneList"];
  }
  if (__userMailList_isset)
  {
    [encoder encodeObject: __userMailList forKey: @"userMailList"];
  }
}

- (void) dealloc
{
  [__name release];
  [__intro release];
  [__picture release];
  [__userLinkList release];
  [__userPhoneList release];
  [__userMailList release];
  [super dealloc];
}

- (int64_t) id {
  return __id;
}

- (void) setId: (int64_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (NSString *) name {
  return [[__name retain] autorelease];
}

- (void) setName: (NSString *) name {
  [name retain];
  [__name release];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) intro {
  return [[__intro retain] autorelease];
}

- (void) setIntro: (NSString *) intro {
  [intro retain];
  [__intro release];
  __intro = intro;
  __intro_isset = YES;
}

- (BOOL) introIsSet {
  return __intro_isset;
}

- (void) unsetIntro {
  [__intro release];
  __intro = nil;
  __intro_isset = NO;
}

- (NSData *) picture {
  return [[__picture retain] autorelease];
}

- (void) setPicture: (NSData *) picture {
  [picture retain];
  [__picture release];
  __picture = picture;
  __picture_isset = YES;
}

- (BOOL) pictureIsSet {
  return __picture_isset;
}

- (void) unsetPicture {
  [__picture release];
  __picture = nil;
  __picture_isset = NO;
}

- (NSArray *) userLinkList {
  return [[__userLinkList retain] autorelease];
}

- (void) setUserLinkList: (NSArray *) userLinkList {
  [userLinkList retain];
  [__userLinkList release];
  __userLinkList = userLinkList;
  __userLinkList_isset = YES;
}

- (BOOL) userLinkListIsSet {
  return __userLinkList_isset;
}

- (void) unsetUserLinkList {
  [__userLinkList release];
  __userLinkList = nil;
  __userLinkList_isset = NO;
}

- (NSArray *) userPhoneList {
  return [[__userPhoneList retain] autorelease];
}

- (void) setUserPhoneList: (NSArray *) userPhoneList {
  [userPhoneList retain];
  [__userPhoneList release];
  __userPhoneList = userPhoneList;
  __userPhoneList_isset = YES;
}

- (BOOL) userPhoneListIsSet {
  return __userPhoneList_isset;
}

- (void) unsetUserPhoneList {
  [__userPhoneList release];
  __userPhoneList = nil;
  __userPhoneList_isset = NO;
}

- (NSArray *) userMailList {
  return [[__userMailList retain] autorelease];
}

- (void) setUserMailList: (NSArray *) userMailList {
  [userMailList retain];
  [__userMailList release];
  __userMailList = userMailList;
  __userMailList_isset = YES;
}

- (BOOL) userMailListIsSet {
  return __userMailList_isset;
}

- (void) unsetUserMailList {
  [__userMailList release];
  __userMailList = nil;
  __userMailList_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIntro: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setPicture: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            UserLink *_elem2 = [[UserLink alloc] init];
            [_elem2 read: inProtocol];
            [fieldValue addObject: _elem2];
            [_elem2 release];
          }
          [inProtocol readListEnd];
          [self setUserLinkList: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_LIST) {
          int _size3;
          [inProtocol readListBeginReturningElementType: NULL size: &_size3];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size3];
          int _i4;
          for (_i4 = 0; _i4 < _size3; ++_i4)
          {
            UserPhone *_elem5 = [[UserPhone alloc] init];
            [_elem5 read: inProtocol];
            [fieldValue addObject: _elem5];
            [_elem5 release];
          }
          [inProtocol readListEnd];
          [self setUserPhoneList: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_LIST) {
          int _size6;
          [inProtocol readListBeginReturningElementType: NULL size: &_size6];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size6];
          int _i7;
          for (_i7 = 0; _i7 < _size6; ++_i7)
          {
            UserMail *_elem8 = [[UserMail alloc] init];
            [_elem8 read: inProtocol];
            [fieldValue addObject: _elem8];
            [_elem8 release];
          }
          [inProtocol readListEnd];
          [self setUserMailList: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"UserInfo"];
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __id];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__intro_isset) {
    if (__intro != nil) {
      [outProtocol writeFieldBeginWithName: @"intro" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __intro];
      [outProtocol writeFieldEnd];
    }
  }
  if (__picture_isset) {
    if (__picture != nil) {
      [outProtocol writeFieldBeginWithName: @"picture" type: TType_STRING fieldID: 4];
      [outProtocol writeBinary: __picture];
      [outProtocol writeFieldEnd];
    }
  }
  if (__userLinkList_isset) {
    if (__userLinkList != nil) {
      [outProtocol writeFieldBeginWithName: @"userLinkList" type: TType_LIST fieldID: 5];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__userLinkList count]];
        int i10;
        for (i10 = 0; i10 < [__userLinkList count]; i10++)
        {
          [[__userLinkList objectAtIndex: i10] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__userPhoneList_isset) {
    if (__userPhoneList != nil) {
      [outProtocol writeFieldBeginWithName: @"userPhoneList" type: TType_LIST fieldID: 6];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__userPhoneList count]];
        int i12;
        for (i12 = 0; i12 < [__userPhoneList count]; i12++)
        {
          [[__userPhoneList objectAtIndex: i12] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__userMailList_isset) {
    if (__userMailList != nil) {
      [outProtocol writeFieldBeginWithName: @"userMailList" type: TType_LIST fieldID: 7];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__userMailList count]];
        int i14;
        for (i14 = 0; i14 < [__userMailList count]; i14++)
        {
          [[__userMailList objectAtIndex: i14] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"UserInfo("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%qi", __id];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",intro:"];
  [ms appendFormat: @"\"%@\"", __intro];
  [ms appendString: @",picture:"];
  [ms appendFormat: @"\"%@\"", __picture];
  [ms appendString: @",userLinkList:"];
  [ms appendFormat: @"%@", __userLinkList];
  [ms appendString: @",userPhoneList:"];
  [ms appendFormat: @"%@", __userPhoneList];
  [ms appendString: @",userMailList:"];
  [ms appendFormat: @"%@", __userMailList];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation EventInfo

- (id) initWithId: (int64_t) id title: (NSString *) title intro: (NSString *) intro eventType: (int) eventType startDate: (TimeStamp) startDate expireDate: (TimeStamp) expireDate initiator: (UserInfo *) initiator guestList: (NSArray *) guestList participantAuthedCount: (int64_t) participantAuthedCount participantUnauthedCount: (int64_t) participantUnauthedCount participantAuthedList: (NSArray *) participantAuthedList participantUnauthedList: (NSArray *) participantUnauthedList
{
  self = [super init];
  __id = id;
  __id_isset = YES;
  __title = [title retain];
  __title_isset = YES;
  __intro = [intro retain];
  __intro_isset = YES;
  __eventType = eventType;
  __eventType_isset = YES;
  __startDate = startDate;
  __startDate_isset = YES;
  __expireDate = expireDate;
  __expireDate_isset = YES;
  __initiator = [initiator retain];
  __initiator_isset = YES;
  __guestList = [guestList retain];
  __guestList_isset = YES;
  __participantAuthedCount = participantAuthedCount;
  __participantAuthedCount_isset = YES;
  __participantUnauthedCount = participantUnauthedCount;
  __participantUnauthedCount_isset = YES;
  __participantAuthedList = [participantAuthedList retain];
  __participantAuthedList_isset = YES;
  __participantUnauthedList = [participantUnauthedList retain];
  __participantUnauthedList_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt64ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"title"])
  {
    __title = [[decoder decodeObjectForKey: @"title"] retain];
    __title_isset = YES;
  }
  if ([decoder containsValueForKey: @"intro"])
  {
    __intro = [[decoder decodeObjectForKey: @"intro"] retain];
    __intro_isset = YES;
  }
  if ([decoder containsValueForKey: @"eventType"])
  {
    __eventType = [decoder decodeIntForKey: @"eventType"];
    __eventType_isset = YES;
  }
  if ([decoder containsValueForKey: @"startDate"])
  {
    __startDate = [decoder decodeInt64ForKey: @"startDate"];
    __startDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"expireDate"])
  {
    __expireDate = [decoder decodeInt64ForKey: @"expireDate"];
    __expireDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"initiator"])
  {
    __initiator = [[decoder decodeObjectForKey: @"initiator"] retain];
    __initiator_isset = YES;
  }
  if ([decoder containsValueForKey: @"guestList"])
  {
    __guestList = [[decoder decodeObjectForKey: @"guestList"] retain];
    __guestList_isset = YES;
  }
  if ([decoder containsValueForKey: @"participantAuthedCount"])
  {
    __participantAuthedCount = [decoder decodeInt64ForKey: @"participantAuthedCount"];
    __participantAuthedCount_isset = YES;
  }
  if ([decoder containsValueForKey: @"participantUnauthedCount"])
  {
    __participantUnauthedCount = [decoder decodeInt64ForKey: @"participantUnauthedCount"];
    __participantUnauthedCount_isset = YES;
  }
  if ([decoder containsValueForKey: @"participantAuthedList"])
  {
    __participantAuthedList = [[decoder decodeObjectForKey: @"participantAuthedList"] retain];
    __participantAuthedList_isset = YES;
  }
  if ([decoder containsValueForKey: @"participantUnauthedList"])
  {
    __participantUnauthedList = [[decoder decodeObjectForKey: @"participantUnauthedList"] retain];
    __participantUnauthedList_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeInt64: __id forKey: @"id"];
  }
  if (__title_isset)
  {
    [encoder encodeObject: __title forKey: @"title"];
  }
  if (__intro_isset)
  {
    [encoder encodeObject: __intro forKey: @"intro"];
  }
  if (__eventType_isset)
  {
    [encoder encodeInt: __eventType forKey: @"eventType"];
  }
  if (__startDate_isset)
  {
    [encoder encodeInt64: __startDate forKey: @"startDate"];
  }
  if (__expireDate_isset)
  {
    [encoder encodeInt64: __expireDate forKey: @"expireDate"];
  }
  if (__initiator_isset)
  {
    [encoder encodeObject: __initiator forKey: @"initiator"];
  }
  if (__guestList_isset)
  {
    [encoder encodeObject: __guestList forKey: @"guestList"];
  }
  if (__participantAuthedCount_isset)
  {
    [encoder encodeInt64: __participantAuthedCount forKey: @"participantAuthedCount"];
  }
  if (__participantUnauthedCount_isset)
  {
    [encoder encodeInt64: __participantUnauthedCount forKey: @"participantUnauthedCount"];
  }
  if (__participantAuthedList_isset)
  {
    [encoder encodeObject: __participantAuthedList forKey: @"participantAuthedList"];
  }
  if (__participantUnauthedList_isset)
  {
    [encoder encodeObject: __participantUnauthedList forKey: @"participantUnauthedList"];
  }
}

- (void) dealloc
{
  [__title release];
  [__intro release];
  [__initiator release];
  [__guestList release];
  [__participantAuthedList release];
  [__participantUnauthedList release];
  [super dealloc];
}

- (int64_t) id {
  return __id;
}

- (void) setId: (int64_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (NSString *) title {
  return [[__title retain] autorelease];
}

- (void) setTitle: (NSString *) title {
  [title retain];
  [__title release];
  __title = title;
  __title_isset = YES;
}

- (BOOL) titleIsSet {
  return __title_isset;
}

- (void) unsetTitle {
  [__title release];
  __title = nil;
  __title_isset = NO;
}

- (NSString *) intro {
  return [[__intro retain] autorelease];
}

- (void) setIntro: (NSString *) intro {
  [intro retain];
  [__intro release];
  __intro = intro;
  __intro_isset = YES;
}

- (BOOL) introIsSet {
  return __intro_isset;
}

- (void) unsetIntro {
  [__intro release];
  __intro = nil;
  __intro_isset = NO;
}

- (int) eventType {
  return __eventType;
}

- (void) setEventType: (int) eventType {
  __eventType = eventType;
  __eventType_isset = YES;
}

- (BOOL) eventTypeIsSet {
  return __eventType_isset;
}

- (void) unsetEventType {
  __eventType_isset = NO;
}

- (int64_t) startDate {
  return __startDate;
}

- (void) setStartDate: (int64_t) startDate {
  __startDate = startDate;
  __startDate_isset = YES;
}

- (BOOL) startDateIsSet {
  return __startDate_isset;
}

- (void) unsetStartDate {
  __startDate_isset = NO;
}

- (int64_t) expireDate {
  return __expireDate;
}

- (void) setExpireDate: (int64_t) expireDate {
  __expireDate = expireDate;
  __expireDate_isset = YES;
}

- (BOOL) expireDateIsSet {
  return __expireDate_isset;
}

- (void) unsetExpireDate {
  __expireDate_isset = NO;
}

- (UserInfo *) initiator {
  return [[__initiator retain] autorelease];
}

- (void) setInitiator: (UserInfo *) initiator {
  [initiator retain];
  [__initiator release];
  __initiator = initiator;
  __initiator_isset = YES;
}

- (BOOL) initiatorIsSet {
  return __initiator_isset;
}

- (void) unsetInitiator {
  [__initiator release];
  __initiator = nil;
  __initiator_isset = NO;
}

- (NSArray *) guestList {
  return [[__guestList retain] autorelease];
}

- (void) setGuestList: (NSArray *) guestList {
  [guestList retain];
  [__guestList release];
  __guestList = guestList;
  __guestList_isset = YES;
}

- (BOOL) guestListIsSet {
  return __guestList_isset;
}

- (void) unsetGuestList {
  [__guestList release];
  __guestList = nil;
  __guestList_isset = NO;
}

- (int64_t) participantAuthedCount {
  return __participantAuthedCount;
}

- (void) setParticipantAuthedCount: (int64_t) participantAuthedCount {
  __participantAuthedCount = participantAuthedCount;
  __participantAuthedCount_isset = YES;
}

- (BOOL) participantAuthedCountIsSet {
  return __participantAuthedCount_isset;
}

- (void) unsetParticipantAuthedCount {
  __participantAuthedCount_isset = NO;
}

- (int64_t) participantUnauthedCount {
  return __participantUnauthedCount;
}

- (void) setParticipantUnauthedCount: (int64_t) participantUnauthedCount {
  __participantUnauthedCount = participantUnauthedCount;
  __participantUnauthedCount_isset = YES;
}

- (BOOL) participantUnauthedCountIsSet {
  return __participantUnauthedCount_isset;
}

- (void) unsetParticipantUnauthedCount {
  __participantUnauthedCount_isset = NO;
}

- (NSArray *) participantAuthedList {
  return [[__participantAuthedList retain] autorelease];
}

- (void) setParticipantAuthedList: (NSArray *) participantAuthedList {
  [participantAuthedList retain];
  [__participantAuthedList release];
  __participantAuthedList = participantAuthedList;
  __participantAuthedList_isset = YES;
}

- (BOOL) participantAuthedListIsSet {
  return __participantAuthedList_isset;
}

- (void) unsetParticipantAuthedList {
  [__participantAuthedList release];
  __participantAuthedList = nil;
  __participantAuthedList_isset = NO;
}

- (NSArray *) participantUnauthedList {
  return [[__participantUnauthedList retain] autorelease];
}

- (void) setParticipantUnauthedList: (NSArray *) participantUnauthedList {
  [participantUnauthedList retain];
  [__participantUnauthedList release];
  __participantUnauthedList = participantUnauthedList;
  __participantUnauthedList_isset = YES;
}

- (BOOL) participantUnauthedListIsSet {
  return __participantUnauthedList_isset;
}

- (void) unsetParticipantUnauthedList {
  [__participantUnauthedList release];
  __participantUnauthedList = nil;
  __participantUnauthedList_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTitle: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIntro: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setEventType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setStartDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setExpireDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRUCT) {
          UserInfo *fieldValue = [[UserInfo alloc] init];
          [fieldValue read: inProtocol];
          [self setInitiator: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_LIST) {
          int _size15;
          [inProtocol readListBeginReturningElementType: NULL size: &_size15];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size15];
          int _i16;
          for (_i16 = 0; _i16 < _size15; ++_i16)
          {
            UserInfo *_elem17 = [[UserInfo alloc] init];
            [_elem17 read: inProtocol];
            [fieldValue addObject: _elem17];
            [_elem17 release];
          }
          [inProtocol readListEnd];
          [self setGuestList: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setParticipantAuthedCount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setParticipantUnauthedCount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_LIST) {
          int _size18;
          [inProtocol readListBeginReturningElementType: NULL size: &_size18];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size18];
          int _i19;
          for (_i19 = 0; _i19 < _size18; ++_i19)
          {
            UserInfo *_elem20 = [[UserInfo alloc] init];
            [_elem20 read: inProtocol];
            [fieldValue addObject: _elem20];
            [_elem20 release];
          }
          [inProtocol readListEnd];
          [self setParticipantAuthedList: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_LIST) {
          int _size21;
          [inProtocol readListBeginReturningElementType: NULL size: &_size21];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size21];
          int _i22;
          for (_i22 = 0; _i22 < _size21; ++_i22)
          {
            UserInfo *_elem23 = [[UserInfo alloc] init];
            [_elem23 read: inProtocol];
            [fieldValue addObject: _elem23];
            [_elem23 release];
          }
          [inProtocol readListEnd];
          [self setParticipantUnauthedList: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"EventInfo"];
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __id];
    [outProtocol writeFieldEnd];
  }
  if (__title_isset) {
    if (__title != nil) {
      [outProtocol writeFieldBeginWithName: @"title" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __title];
      [outProtocol writeFieldEnd];
    }
  }
  if (__intro_isset) {
    if (__intro != nil) {
      [outProtocol writeFieldBeginWithName: @"intro" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __intro];
      [outProtocol writeFieldEnd];
    }
  }
  if (__eventType_isset) {
    [outProtocol writeFieldBeginWithName: @"eventType" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __eventType];
    [outProtocol writeFieldEnd];
  }
  if (__startDate_isset) {
    [outProtocol writeFieldBeginWithName: @"startDate" type: TType_I64 fieldID: 5];
    [outProtocol writeI64: __startDate];
    [outProtocol writeFieldEnd];
  }
  if (__expireDate_isset) {
    [outProtocol writeFieldBeginWithName: @"expireDate" type: TType_I64 fieldID: 6];
    [outProtocol writeI64: __expireDate];
    [outProtocol writeFieldEnd];
  }
  if (__initiator_isset) {
    if (__initiator != nil) {
      [outProtocol writeFieldBeginWithName: @"initiator" type: TType_STRUCT fieldID: 7];
      [__initiator write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__guestList_isset) {
    if (__guestList != nil) {
      [outProtocol writeFieldBeginWithName: @"guestList" type: TType_LIST fieldID: 8];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__guestList count]];
        int i25;
        for (i25 = 0; i25 < [__guestList count]; i25++)
        {
          [[__guestList objectAtIndex: i25] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__participantAuthedCount_isset) {
    [outProtocol writeFieldBeginWithName: @"participantAuthedCount" type: TType_I64 fieldID: 9];
    [outProtocol writeI64: __participantAuthedCount];
    [outProtocol writeFieldEnd];
  }
  if (__participantUnauthedCount_isset) {
    [outProtocol writeFieldBeginWithName: @"participantUnauthedCount" type: TType_I64 fieldID: 10];
    [outProtocol writeI64: __participantUnauthedCount];
    [outProtocol writeFieldEnd];
  }
  if (__participantAuthedList_isset) {
    if (__participantAuthedList != nil) {
      [outProtocol writeFieldBeginWithName: @"participantAuthedList" type: TType_LIST fieldID: 11];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__participantAuthedList count]];
        int i27;
        for (i27 = 0; i27 < [__participantAuthedList count]; i27++)
        {
          [[__participantAuthedList objectAtIndex: i27] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__participantUnauthedList_isset) {
    if (__participantUnauthedList != nil) {
      [outProtocol writeFieldBeginWithName: @"participantUnauthedList" type: TType_LIST fieldID: 12];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__participantUnauthedList count]];
        int i29;
        for (i29 = 0; i29 < [__participantUnauthedList count]; i29++)
        {
          [[__participantUnauthedList objectAtIndex: i29] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"EventInfo("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%qi", __id];
  [ms appendString: @",title:"];
  [ms appendFormat: @"\"%@\"", __title];
  [ms appendString: @",intro:"];
  [ms appendFormat: @"\"%@\"", __intro];
  [ms appendString: @",eventType:"];
  [ms appendFormat: @"%i", __eventType];
  [ms appendString: @",startDate:"];
  [ms appendFormat: @"%qi", __startDate];
  [ms appendString: @",expireDate:"];
  [ms appendFormat: @"%qi", __expireDate];
  [ms appendString: @",initiator:"];
  [ms appendFormat: @"%@", __initiator];
  [ms appendString: @",guestList:"];
  [ms appendFormat: @"%@", __guestList];
  [ms appendString: @",participantAuthedCount:"];
  [ms appendFormat: @"%qi", __participantAuthedCount];
  [ms appendString: @",participantUnauthedCount:"];
  [ms appendFormat: @"%qi", __participantUnauthedCount];
  [ms appendString: @",participantAuthedList:"];
  [ms appendFormat: @"%@", __participantAuthedList];
  [ms appendString: @",participantUnauthedList:"];
  [ms appendFormat: @"%@", __participantUnauthedList];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation typeConstants
+ (void) initialize {
}
@end


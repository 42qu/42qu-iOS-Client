/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import <TProtocol.h>
#import <TApplicationException.h>
#import <TProtocolUtil.h>
#import <TProcessor.h>


#import "type.h"

@implementation AuthRequestMail

- (id) initWithClient_id: (NSString *) client_id client_secret: (NSString *) client_secret mail: (NSString *) mail password: (NSString *) password
{
  self = [super init];
  __client_id = [client_id retain];
  __client_id_isset = YES;
  __client_secret = [client_secret retain];
  __client_secret_isset = YES;
  __mail = [mail retain];
  __mail_isset = YES;
  __password = [password retain];
  __password_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"client_id"])
  {
    __client_id = [[decoder decodeObjectForKey: @"client_id"] retain];
    __client_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"client_secret"])
  {
    __client_secret = [[decoder decodeObjectForKey: @"client_secret"] retain];
    __client_secret_isset = YES;
  }
  if ([decoder containsValueForKey: @"mail"])
  {
    __mail = [[decoder decodeObjectForKey: @"mail"] retain];
    __mail_isset = YES;
  }
  if ([decoder containsValueForKey: @"password"])
  {
    __password = [[decoder decodeObjectForKey: @"password"] retain];
    __password_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__client_id_isset)
  {
    [encoder encodeObject: __client_id forKey: @"client_id"];
  }
  if (__client_secret_isset)
  {
    [encoder encodeObject: __client_secret forKey: @"client_secret"];
  }
  if (__mail_isset)
  {
    [encoder encodeObject: __mail forKey: @"mail"];
  }
  if (__password_isset)
  {
    [encoder encodeObject: __password forKey: @"password"];
  }
}

- (void) dealloc
{
  [__client_id release];
  [__client_secret release];
  [__mail release];
  [__password release];
  [super dealloc];
}

- (NSString *) client_id {
  return [[__client_id retain] autorelease];
}

- (void) setClient_id: (NSString *) client_id {
  [client_id retain];
  [__client_id release];
  __client_id = client_id;
  __client_id_isset = YES;
}

- (BOOL) client_idIsSet {
  return __client_id_isset;
}

- (void) unsetClient_id {
  [__client_id release];
  __client_id = nil;
  __client_id_isset = NO;
}

- (NSString *) client_secret {
  return [[__client_secret retain] autorelease];
}

- (void) setClient_secret: (NSString *) client_secret {
  [client_secret retain];
  [__client_secret release];
  __client_secret = client_secret;
  __client_secret_isset = YES;
}

- (BOOL) client_secretIsSet {
  return __client_secret_isset;
}

- (void) unsetClient_secret {
  [__client_secret release];
  __client_secret = nil;
  __client_secret_isset = NO;
}

- (NSString *) mail {
  return [[__mail retain] autorelease];
}

- (void) setMail: (NSString *) mail {
  [mail retain];
  [__mail release];
  __mail = mail;
  __mail_isset = YES;
}

- (BOOL) mailIsSet {
  return __mail_isset;
}

- (void) unsetMail {
  [__mail release];
  __mail = nil;
  __mail_isset = NO;
}

- (NSString *) password {
  return [[__password retain] autorelease];
}

- (void) setPassword: (NSString *) password {
  [password retain];
  [__password release];
  __password = password;
  __password_isset = YES;
}

- (BOOL) passwordIsSet {
  return __password_isset;
}

- (void) unsetPassword {
  [__password release];
  __password = nil;
  __password_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setClient_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setClient_secret: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMail: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPassword: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AuthRequestMail"];
  if (__client_id_isset) {
    if (__client_id != nil) {
      [outProtocol writeFieldBeginWithName: @"client_id" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __client_id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__client_secret_isset) {
    if (__client_secret != nil) {
      [outProtocol writeFieldBeginWithName: @"client_secret" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __client_secret];
      [outProtocol writeFieldEnd];
    }
  }
  if (__mail_isset) {
    if (__mail != nil) {
      [outProtocol writeFieldBeginWithName: @"mail" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __mail];
      [outProtocol writeFieldEnd];
    }
  }
  if (__password_isset) {
    if (__password != nil) {
      [outProtocol writeFieldBeginWithName: @"password" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __password];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AuthRequestMail("];
  [ms appendString: @"client_id:"];
  [ms appendFormat: @"\"%@\"", __client_id];
  [ms appendString: @",client_secret:"];
  [ms appendFormat: @"\"%@\"", __client_secret];
  [ms appendString: @",mail:"];
  [ms appendFormat: @"\"%@\"", __mail];
  [ms appendString: @",password:"];
  [ms appendFormat: @"\"%@\"", __password];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AuthResponse

- (id) initWithStatus: (int) status id: (int64_t) id name: (NSString *) name access_token: (NSString *) access_token expire_time: (int64_t) expire_time refresh_token: (NSString *) refresh_token
{
  self = [super init];
  __status = status;
  __status_isset = YES;
  __id = id;
  __id_isset = YES;
  __name = [name retain];
  __name_isset = YES;
  __access_token = [access_token retain];
  __access_token_isset = YES;
  __expire_time = expire_time;
  __expire_time_isset = YES;
  __refresh_token = [refresh_token retain];
  __refresh_token_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"status"])
  {
    __status = [decoder decodeIntForKey: @"status"];
    __status_isset = YES;
  }
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt64ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"access_token"])
  {
    __access_token = [[decoder decodeObjectForKey: @"access_token"] retain];
    __access_token_isset = YES;
  }
  if ([decoder containsValueForKey: @"expire_time"])
  {
    __expire_time = [decoder decodeInt64ForKey: @"expire_time"];
    __expire_time_isset = YES;
  }
  if ([decoder containsValueForKey: @"refresh_token"])
  {
    __refresh_token = [[decoder decodeObjectForKey: @"refresh_token"] retain];
    __refresh_token_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__status_isset)
  {
    [encoder encodeInt: __status forKey: @"status"];
  }
  if (__id_isset)
  {
    [encoder encodeInt64: __id forKey: @"id"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__access_token_isset)
  {
    [encoder encodeObject: __access_token forKey: @"access_token"];
  }
  if (__expire_time_isset)
  {
    [encoder encodeInt64: __expire_time forKey: @"expire_time"];
  }
  if (__refresh_token_isset)
  {
    [encoder encodeObject: __refresh_token forKey: @"refresh_token"];
  }
}

- (void) dealloc
{
  [__name release];
  [__access_token release];
  [__refresh_token release];
  [super dealloc];
}

- (int) status {
  return __status;
}

- (void) setStatus: (int) status {
  __status = status;
  __status_isset = YES;
}

- (BOOL) statusIsSet {
  return __status_isset;
}

- (void) unsetStatus {
  __status_isset = NO;
}

- (int64_t) id {
  return __id;
}

- (void) setId: (int64_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (NSString *) name {
  return [[__name retain] autorelease];
}

- (void) setName: (NSString *) name {
  [name retain];
  [__name release];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) access_token {
  return [[__access_token retain] autorelease];
}

- (void) setAccess_token: (NSString *) access_token {
  [access_token retain];
  [__access_token release];
  __access_token = access_token;
  __access_token_isset = YES;
}

- (BOOL) access_tokenIsSet {
  return __access_token_isset;
}

- (void) unsetAccess_token {
  [__access_token release];
  __access_token = nil;
  __access_token_isset = NO;
}

- (int64_t) expire_time {
  return __expire_time;
}

- (void) setExpire_time: (int64_t) expire_time {
  __expire_time = expire_time;
  __expire_time_isset = YES;
}

- (BOOL) expire_timeIsSet {
  return __expire_time_isset;
}

- (void) unsetExpire_time {
  __expire_time_isset = NO;
}

- (NSString *) refresh_token {
  return [[__refresh_token retain] autorelease];
}

- (void) setRefresh_token: (NSString *) refresh_token {
  [refresh_token retain];
  [__refresh_token release];
  __refresh_token = refresh_token;
  __refresh_token_isset = YES;
}

- (BOOL) refresh_tokenIsSet {
  return __refresh_token_isset;
}

- (void) unsetRefresh_token {
  [__refresh_token release];
  __refresh_token = nil;
  __refresh_token_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAccess_token: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setExpire_time: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRefresh_token: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AuthResponse"];
  if (__status_isset) {
    [outProtocol writeFieldBeginWithName: @"status" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __status];
    [outProtocol writeFieldEnd];
  }
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __id];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__access_token_isset) {
    if (__access_token != nil) {
      [outProtocol writeFieldBeginWithName: @"access_token" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __access_token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__expire_time_isset) {
    [outProtocol writeFieldBeginWithName: @"expire_time" type: TType_I64 fieldID: 5];
    [outProtocol writeI64: __expire_time];
    [outProtocol writeFieldEnd];
  }
  if (__refresh_token_isset) {
    if (__refresh_token != nil) {
      [outProtocol writeFieldBeginWithName: @"refresh_token" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __refresh_token];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AuthResponse("];
  [ms appendString: @"status:"];
  [ms appendFormat: @"%i", __status];
  [ms appendString: @",id:"];
  [ms appendFormat: @"%qi", __id];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",access_token:"];
  [ms appendFormat: @"\"%@\"", __access_token];
  [ms appendString: @",expire_time:"];
  [ms appendFormat: @"%qi", __expire_time];
  [ms appendString: @",refresh_token:"];
  [ms appendFormat: @"\"%@\"", __refresh_token];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation UserLink

- (id) initWithId: (int64_t) id type: (int) type value: (NSString *) value label: (NSString *) label
{
  self = [super init];
  __id = id;
  __id_isset = YES;
  __type = type;
  __type_isset = YES;
  __value = [value retain];
  __value_isset = YES;
  __label = [label retain];
  __label_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt64ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [decoder decodeIntForKey: @"type"];
    __type_isset = YES;
  }
  if ([decoder containsValueForKey: @"value"])
  {
    __value = [[decoder decodeObjectForKey: @"value"] retain];
    __value_isset = YES;
  }
  if ([decoder containsValueForKey: @"label"])
  {
    __label = [[decoder decodeObjectForKey: @"label"] retain];
    __label_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeInt64: __id forKey: @"id"];
  }
  if (__type_isset)
  {
    [encoder encodeInt: __type forKey: @"type"];
  }
  if (__value_isset)
  {
    [encoder encodeObject: __value forKey: @"value"];
  }
  if (__label_isset)
  {
    [encoder encodeObject: __label forKey: @"label"];
  }
}

- (void) dealloc
{
  [__value release];
  [__label release];
  [super dealloc];
}

- (int64_t) id {
  return __id;
}

- (void) setId: (int64_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (int) type {
  return __type;
}

- (void) setType: (int) type {
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  __type_isset = NO;
}

- (NSString *) value {
  return [[__value retain] autorelease];
}

- (void) setValue: (NSString *) value {
  [value retain];
  [__value release];
  __value = value;
  __value_isset = YES;
}

- (BOOL) valueIsSet {
  return __value_isset;
}

- (void) unsetValue {
  [__value release];
  __value = nil;
  __value_isset = NO;
}

- (NSString *) label {
  return [[__label retain] autorelease];
}

- (void) setLabel: (NSString *) label {
  [label retain];
  [__label release];
  __label = label;
  __label_isset = YES;
}

- (BOOL) labelIsSet {
  return __label_isset;
}

- (void) unsetLabel {
  [__label release];
  __label = nil;
  __label_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setValue: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLabel: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"UserLink"];
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __id];
    [outProtocol writeFieldEnd];
  }
  if (__type_isset) {
    [outProtocol writeFieldBeginWithName: @"type" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __type];
    [outProtocol writeFieldEnd];
  }
  if (__value_isset) {
    if (__value != nil) {
      [outProtocol writeFieldBeginWithName: @"value" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __value];
      [outProtocol writeFieldEnd];
    }
  }
  if (__label_isset) {
    if (__label != nil) {
      [outProtocol writeFieldBeginWithName: @"label" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __label];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"UserLink("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%qi", __id];
  [ms appendString: @",type:"];
  [ms appendFormat: @"%i", __type];
  [ms appendString: @",value:"];
  [ms appendFormat: @"\"%@\"", __value];
  [ms appendString: @",label:"];
  [ms appendFormat: @"\"%@\"", __label];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation UserPhone

- (id) initWithId: (int64_t) id type: (int) type value: (NSString *) value label: (NSString *) label
{
  self = [super init];
  __id = id;
  __id_isset = YES;
  __type = type;
  __type_isset = YES;
  __value = [value retain];
  __value_isset = YES;
  __label = [label retain];
  __label_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt64ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [decoder decodeIntForKey: @"type"];
    __type_isset = YES;
  }
  if ([decoder containsValueForKey: @"value"])
  {
    __value = [[decoder decodeObjectForKey: @"value"] retain];
    __value_isset = YES;
  }
  if ([decoder containsValueForKey: @"label"])
  {
    __label = [[decoder decodeObjectForKey: @"label"] retain];
    __label_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeInt64: __id forKey: @"id"];
  }
  if (__type_isset)
  {
    [encoder encodeInt: __type forKey: @"type"];
  }
  if (__value_isset)
  {
    [encoder encodeObject: __value forKey: @"value"];
  }
  if (__label_isset)
  {
    [encoder encodeObject: __label forKey: @"label"];
  }
}

- (void) dealloc
{
  [__value release];
  [__label release];
  [super dealloc];
}

- (int64_t) id {
  return __id;
}

- (void) setId: (int64_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (int) type {
  return __type;
}

- (void) setType: (int) type {
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  __type_isset = NO;
}

- (NSString *) value {
  return [[__value retain] autorelease];
}

- (void) setValue: (NSString *) value {
  [value retain];
  [__value release];
  __value = value;
  __value_isset = YES;
}

- (BOOL) valueIsSet {
  return __value_isset;
}

- (void) unsetValue {
  [__value release];
  __value = nil;
  __value_isset = NO;
}

- (NSString *) label {
  return [[__label retain] autorelease];
}

- (void) setLabel: (NSString *) label {
  [label retain];
  [__label release];
  __label = label;
  __label_isset = YES;
}

- (BOOL) labelIsSet {
  return __label_isset;
}

- (void) unsetLabel {
  [__label release];
  __label = nil;
  __label_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setValue: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLabel: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"UserPhone"];
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __id];
    [outProtocol writeFieldEnd];
  }
  if (__type_isset) {
    [outProtocol writeFieldBeginWithName: @"type" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __type];
    [outProtocol writeFieldEnd];
  }
  if (__value_isset) {
    if (__value != nil) {
      [outProtocol writeFieldBeginWithName: @"value" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __value];
      [outProtocol writeFieldEnd];
    }
  }
  if (__label_isset) {
    if (__label != nil) {
      [outProtocol writeFieldBeginWithName: @"label" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __label];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"UserPhone("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%qi", __id];
  [ms appendString: @",type:"];
  [ms appendFormat: @"%i", __type];
  [ms appendString: @",value:"];
  [ms appendFormat: @"\"%@\"", __value];
  [ms appendString: @",label:"];
  [ms appendFormat: @"\"%@\"", __label];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation UserMail

- (id) initWithId: (int64_t) id type: (int) type value: (NSString *) value label: (NSString *) label
{
  self = [super init];
  __id = id;
  __id_isset = YES;
  __type = type;
  __type_isset = YES;
  __value = [value retain];
  __value_isset = YES;
  __label = [label retain];
  __label_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt64ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [decoder decodeIntForKey: @"type"];
    __type_isset = YES;
  }
  if ([decoder containsValueForKey: @"value"])
  {
    __value = [[decoder decodeObjectForKey: @"value"] retain];
    __value_isset = YES;
  }
  if ([decoder containsValueForKey: @"label"])
  {
    __label = [[decoder decodeObjectForKey: @"label"] retain];
    __label_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeInt64: __id forKey: @"id"];
  }
  if (__type_isset)
  {
    [encoder encodeInt: __type forKey: @"type"];
  }
  if (__value_isset)
  {
    [encoder encodeObject: __value forKey: @"value"];
  }
  if (__label_isset)
  {
    [encoder encodeObject: __label forKey: @"label"];
  }
}

- (void) dealloc
{
  [__value release];
  [__label release];
  [super dealloc];
}

- (int64_t) id {
  return __id;
}

- (void) setId: (int64_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (int) type {
  return __type;
}

- (void) setType: (int) type {
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  __type_isset = NO;
}

- (NSString *) value {
  return [[__value retain] autorelease];
}

- (void) setValue: (NSString *) value {
  [value retain];
  [__value release];
  __value = value;
  __value_isset = YES;
}

- (BOOL) valueIsSet {
  return __value_isset;
}

- (void) unsetValue {
  [__value release];
  __value = nil;
  __value_isset = NO;
}

- (NSString *) label {
  return [[__label retain] autorelease];
}

- (void) setLabel: (NSString *) label {
  [label retain];
  [__label release];
  __label = label;
  __label_isset = YES;
}

- (BOOL) labelIsSet {
  return __label_isset;
}

- (void) unsetLabel {
  [__label release];
  __label = nil;
  __label_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setValue: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLabel: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"UserMail"];
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __id];
    [outProtocol writeFieldEnd];
  }
  if (__type_isset) {
    [outProtocol writeFieldBeginWithName: @"type" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __type];
    [outProtocol writeFieldEnd];
  }
  if (__value_isset) {
    if (__value != nil) {
      [outProtocol writeFieldBeginWithName: @"value" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __value];
      [outProtocol writeFieldEnd];
    }
  }
  if (__label_isset) {
    if (__label != nil) {
      [outProtocol writeFieldBeginWithName: @"label" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __label];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"UserMail("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%qi", __id];
  [ms appendString: @",type:"];
  [ms appendFormat: @"%i", __type];
  [ms appendString: @",value:"];
  [ms appendFormat: @"\"%@\"", __value];
  [ms appendString: @",label:"];
  [ms appendFormat: @"\"%@\"", __label];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation UserInfo

- (id) initWithId: (int64_t) id name: (NSString *) name intro: (NSString *) intro picture: (NSData *) picture userLinkList: (NSArray *) userLinkList userPhoneList: (NSArray *) userPhoneList userMailList: (NSArray *) userMailList
{
  self = [super init];
  __id = id;
  __id_isset = YES;
  __name = [name retain];
  __name_isset = YES;
  __intro = [intro retain];
  __intro_isset = YES;
  __picture = [picture retain];
  __picture_isset = YES;
  __userLinkList = [userLinkList retain];
  __userLinkList_isset = YES;
  __userPhoneList = [userPhoneList retain];
  __userPhoneList_isset = YES;
  __userMailList = [userMailList retain];
  __userMailList_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt64ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"intro"])
  {
    __intro = [[decoder decodeObjectForKey: @"intro"] retain];
    __intro_isset = YES;
  }
  if ([decoder containsValueForKey: @"picture"])
  {
    __picture = [[decoder decodeObjectForKey: @"picture"] retain];
    __picture_isset = YES;
  }
  if ([decoder containsValueForKey: @"userLinkList"])
  {
    __userLinkList = [[decoder decodeObjectForKey: @"userLinkList"] retain];
    __userLinkList_isset = YES;
  }
  if ([decoder containsValueForKey: @"userPhoneList"])
  {
    __userPhoneList = [[decoder decodeObjectForKey: @"userPhoneList"] retain];
    __userPhoneList_isset = YES;
  }
  if ([decoder containsValueForKey: @"userMailList"])
  {
    __userMailList = [[decoder decodeObjectForKey: @"userMailList"] retain];
    __userMailList_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeInt64: __id forKey: @"id"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__intro_isset)
  {
    [encoder encodeObject: __intro forKey: @"intro"];
  }
  if (__picture_isset)
  {
    [encoder encodeObject: __picture forKey: @"picture"];
  }
  if (__userLinkList_isset)
  {
    [encoder encodeObject: __userLinkList forKey: @"userLinkList"];
  }
  if (__userPhoneList_isset)
  {
    [encoder encodeObject: __userPhoneList forKey: @"userPhoneList"];
  }
  if (__userMailList_isset)
  {
    [encoder encodeObject: __userMailList forKey: @"userMailList"];
  }
}

- (void) dealloc
{
  [__name release];
  [__intro release];
  [__picture release];
  [__userLinkList release];
  [__userPhoneList release];
  [__userMailList release];
  [super dealloc];
}

- (int64_t) id {
  return __id;
}

- (void) setId: (int64_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (NSString *) name {
  return [[__name retain] autorelease];
}

- (void) setName: (NSString *) name {
  [name retain];
  [__name release];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) intro {
  return [[__intro retain] autorelease];
}

- (void) setIntro: (NSString *) intro {
  [intro retain];
  [__intro release];
  __intro = intro;
  __intro_isset = YES;
}

- (BOOL) introIsSet {
  return __intro_isset;
}

- (void) unsetIntro {
  [__intro release];
  __intro = nil;
  __intro_isset = NO;
}

- (NSData *) picture {
  return [[__picture retain] autorelease];
}

- (void) setPicture: (NSData *) picture {
  [picture retain];
  [__picture release];
  __picture = picture;
  __picture_isset = YES;
}

- (BOOL) pictureIsSet {
  return __picture_isset;
}

- (void) unsetPicture {
  [__picture release];
  __picture = nil;
  __picture_isset = NO;
}

- (NSArray *) userLinkList {
  return [[__userLinkList retain] autorelease];
}

- (void) setUserLinkList: (NSArray *) userLinkList {
  [userLinkList retain];
  [__userLinkList release];
  __userLinkList = userLinkList;
  __userLinkList_isset = YES;
}

- (BOOL) userLinkListIsSet {
  return __userLinkList_isset;
}

- (void) unsetUserLinkList {
  [__userLinkList release];
  __userLinkList = nil;
  __userLinkList_isset = NO;
}

- (NSArray *) userPhoneList {
  return [[__userPhoneList retain] autorelease];
}

- (void) setUserPhoneList: (NSArray *) userPhoneList {
  [userPhoneList retain];
  [__userPhoneList release];
  __userPhoneList = userPhoneList;
  __userPhoneList_isset = YES;
}

- (BOOL) userPhoneListIsSet {
  return __userPhoneList_isset;
}

- (void) unsetUserPhoneList {
  [__userPhoneList release];
  __userPhoneList = nil;
  __userPhoneList_isset = NO;
}

- (NSArray *) userMailList {
  return [[__userMailList retain] autorelease];
}

- (void) setUserMailList: (NSArray *) userMailList {
  [userMailList retain];
  [__userMailList release];
  __userMailList = userMailList;
  __userMailList_isset = YES;
}

- (BOOL) userMailListIsSet {
  return __userMailList_isset;
}

- (void) unsetUserMailList {
  [__userMailList release];
  __userMailList = nil;
  __userMailList_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIntro: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setPicture: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            UserLink *_elem2 = [[UserLink alloc] init];
            [_elem2 read: inProtocol];
            [fieldValue addObject: _elem2];
            [_elem2 release];
          }
          [inProtocol readListEnd];
          [self setUserLinkList: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_LIST) {
          int _size3;
          [inProtocol readListBeginReturningElementType: NULL size: &_size3];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size3];
          int _i4;
          for (_i4 = 0; _i4 < _size3; ++_i4)
          {
            UserPhone *_elem5 = [[UserPhone alloc] init];
            [_elem5 read: inProtocol];
            [fieldValue addObject: _elem5];
            [_elem5 release];
          }
          [inProtocol readListEnd];
          [self setUserPhoneList: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_LIST) {
          int _size6;
          [inProtocol readListBeginReturningElementType: NULL size: &_size6];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size6];
          int _i7;
          for (_i7 = 0; _i7 < _size6; ++_i7)
          {
            UserMail *_elem8 = [[UserMail alloc] init];
            [_elem8 read: inProtocol];
            [fieldValue addObject: _elem8];
            [_elem8 release];
          }
          [inProtocol readListEnd];
          [self setUserMailList: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"UserInfo"];
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __id];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__intro_isset) {
    if (__intro != nil) {
      [outProtocol writeFieldBeginWithName: @"intro" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __intro];
      [outProtocol writeFieldEnd];
    }
  }
  if (__picture_isset) {
    if (__picture != nil) {
      [outProtocol writeFieldBeginWithName: @"picture" type: TType_STRING fieldID: 4];
      [outProtocol writeBinary: __picture];
      [outProtocol writeFieldEnd];
    }
  }
  if (__userLinkList_isset) {
    if (__userLinkList != nil) {
      [outProtocol writeFieldBeginWithName: @"userLinkList" type: TType_LIST fieldID: 5];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__userLinkList count]];
        int i10;
        for (i10 = 0; i10 < [__userLinkList count]; i10++)
        {
          [[__userLinkList objectAtIndex: i10] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__userPhoneList_isset) {
    if (__userPhoneList != nil) {
      [outProtocol writeFieldBeginWithName: @"userPhoneList" type: TType_LIST fieldID: 6];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__userPhoneList count]];
        int i12;
        for (i12 = 0; i12 < [__userPhoneList count]; i12++)
        {
          [[__userPhoneList objectAtIndex: i12] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__userMailList_isset) {
    if (__userMailList != nil) {
      [outProtocol writeFieldBeginWithName: @"userMailList" type: TType_LIST fieldID: 7];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__userMailList count]];
        int i14;
        for (i14 = 0; i14 < [__userMailList count]; i14++)
        {
          [[__userMailList objectAtIndex: i14] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"UserInfo("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%qi", __id];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",intro:"];
  [ms appendFormat: @"\"%@\"", __intro];
  [ms appendString: @",picture:"];
  [ms appendFormat: @"\"%@\"", __picture];
  [ms appendString: @",userLinkList:"];
  [ms appendFormat: @"%@", __userLinkList];
  [ms appendString: @",userPhoneList:"];
  [ms appendFormat: @"%@", __userPhoneList];
  [ms appendString: @",userMailList:"];
  [ms appendFormat: @"%@", __userMailList];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation StatusPost

- (id) initWithContent: (NSString *) content tagList: (NSArray *) tagList
{
  self = [super init];
  __content = [content retain];
  __content_isset = YES;
  __tagList = [tagList retain];
  __tagList_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"content"])
  {
    __content = [[decoder decodeObjectForKey: @"content"] retain];
    __content_isset = YES;
  }
  if ([decoder containsValueForKey: @"tagList"])
  {
    __tagList = [[decoder decodeObjectForKey: @"tagList"] retain];
    __tagList_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__content_isset)
  {
    [encoder encodeObject: __content forKey: @"content"];
  }
  if (__tagList_isset)
  {
    [encoder encodeObject: __tagList forKey: @"tagList"];
  }
}

- (void) dealloc
{
  [__content release];
  [__tagList release];
  [super dealloc];
}

- (NSString *) content {
  return [[__content retain] autorelease];
}

- (void) setContent: (NSString *) content {
  [content retain];
  [__content release];
  __content = content;
  __content_isset = YES;
}

- (BOOL) contentIsSet {
  return __content_isset;
}

- (void) unsetContent {
  [__content release];
  __content = nil;
  __content_isset = NO;
}

- (NSArray *) tagList {
  return [[__tagList retain] autorelease];
}

- (void) setTagList: (NSArray *) tagList {
  [tagList retain];
  [__tagList release];
  __tagList = tagList;
  __tagList_isset = YES;
}

- (BOOL) tagListIsSet {
  return __tagList_isset;
}

- (void) unsetTagList {
  [__tagList release];
  __tagList = nil;
  __tagList_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setContent: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size15;
          [inProtocol readListBeginReturningElementType: NULL size: &_size15];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size15];
          int _i16;
          for (_i16 = 0; _i16 < _size15; ++_i16)
          {
            NSString * _elem17 = [inProtocol readString];
            [fieldValue addObject: _elem17];
          }
          [inProtocol readListEnd];
          [self setTagList: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"StatusPost"];
  if (__content_isset) {
    if (__content != nil) {
      [outProtocol writeFieldBeginWithName: @"content" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __content];
      [outProtocol writeFieldEnd];
    }
  }
  if (__tagList_isset) {
    if (__tagList != nil) {
      [outProtocol writeFieldBeginWithName: @"tagList" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__tagList count]];
        int i19;
        for (i19 = 0; i19 < [__tagList count]; i19++)
        {
          [outProtocol writeString: [__tagList objectAtIndex: i19]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"StatusPost("];
  [ms appendString: @"content:"];
  [ms appendFormat: @"\"%@\"", __content];
  [ms appendString: @",tagList:"];
  [ms appendFormat: @"%@", __tagList];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation StatusComment

- (id) initWithId: (int64_t) id authorID: (int64_t) authorID authorName: (NSString *) authorName date: (timestamp) date content: (NSString *) content
{
  self = [super init];
  __id = id;
  __id_isset = YES;
  __authorID = authorID;
  __authorID_isset = YES;
  __authorName = [authorName retain];
  __authorName_isset = YES;
  __date = date;
  __date_isset = YES;
  __content = [content retain];
  __content_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt64ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"authorID"])
  {
    __authorID = [decoder decodeInt64ForKey: @"authorID"];
    __authorID_isset = YES;
  }
  if ([decoder containsValueForKey: @"authorName"])
  {
    __authorName = [[decoder decodeObjectForKey: @"authorName"] retain];
    __authorName_isset = YES;
  }
  if ([decoder containsValueForKey: @"date"])
  {
    __date = [decoder decodeInt64ForKey: @"date"];
    __date_isset = YES;
  }
  if ([decoder containsValueForKey: @"content"])
  {
    __content = [[decoder decodeObjectForKey: @"content"] retain];
    __content_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeInt64: __id forKey: @"id"];
  }
  if (__authorID_isset)
  {
    [encoder encodeInt64: __authorID forKey: @"authorID"];
  }
  if (__authorName_isset)
  {
    [encoder encodeObject: __authorName forKey: @"authorName"];
  }
  if (__date_isset)
  {
    [encoder encodeInt64: __date forKey: @"date"];
  }
  if (__content_isset)
  {
    [encoder encodeObject: __content forKey: @"content"];
  }
}

- (void) dealloc
{
  [__authorName release];
  [__content release];
  [super dealloc];
}

- (int64_t) id {
  return __id;
}

- (void) setId: (int64_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (int64_t) authorID {
  return __authorID;
}

- (void) setAuthorID: (int64_t) authorID {
  __authorID = authorID;
  __authorID_isset = YES;
}

- (BOOL) authorIDIsSet {
  return __authorID_isset;
}

- (void) unsetAuthorID {
  __authorID_isset = NO;
}

- (NSString *) authorName {
  return [[__authorName retain] autorelease];
}

- (void) setAuthorName: (NSString *) authorName {
  [authorName retain];
  [__authorName release];
  __authorName = authorName;
  __authorName_isset = YES;
}

- (BOOL) authorNameIsSet {
  return __authorName_isset;
}

- (void) unsetAuthorName {
  [__authorName release];
  __authorName = nil;
  __authorName_isset = NO;
}

- (int64_t) date {
  return __date;
}

- (void) setDate: (int64_t) date {
  __date = date;
  __date_isset = YES;
}

- (BOOL) dateIsSet {
  return __date_isset;
}

- (void) unsetDate {
  __date_isset = NO;
}

- (NSString *) content {
  return [[__content retain] autorelease];
}

- (void) setContent: (NSString *) content {
  [content retain];
  [__content release];
  __content = content;
  __content_isset = YES;
}

- (BOOL) contentIsSet {
  return __content_isset;
}

- (void) unsetContent {
  [__content release];
  __content = nil;
  __content_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setAuthorID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAuthorName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setContent: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"StatusComment"];
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __id];
    [outProtocol writeFieldEnd];
  }
  if (__authorID_isset) {
    [outProtocol writeFieldBeginWithName: @"authorID" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __authorID];
    [outProtocol writeFieldEnd];
  }
  if (__authorName_isset) {
    if (__authorName != nil) {
      [outProtocol writeFieldBeginWithName: @"authorName" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __authorName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__date_isset) {
    [outProtocol writeFieldBeginWithName: @"date" type: TType_I64 fieldID: 4];
    [outProtocol writeI64: __date];
    [outProtocol writeFieldEnd];
  }
  if (__content_isset) {
    if (__content != nil) {
      [outProtocol writeFieldBeginWithName: @"content" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __content];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"StatusComment("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%qi", __id];
  [ms appendString: @",authorID:"];
  [ms appendFormat: @"%qi", __authorID];
  [ms appendString: @",authorName:"];
  [ms appendFormat: @"\"%@\"", __authorName];
  [ms appendString: @",date:"];
  [ms appendFormat: @"%qi", __date];
  [ms appendString: @",content:"];
  [ms appendFormat: @"\"%@\"", __content];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Status

- (id) initWithId: (int64_t) id authorID: (int64_t) authorID authorName: (NSString *) authorName date: (timestamp) date content: (NSString *) content commentCount: (int64_t) commentCount commentList: (NSArray *) commentList
{
  self = [super init];
  __id = id;
  __id_isset = YES;
  __authorID = authorID;
  __authorID_isset = YES;
  __authorName = [authorName retain];
  __authorName_isset = YES;
  __date = date;
  __date_isset = YES;
  __content = [content retain];
  __content_isset = YES;
  __commentCount = commentCount;
  __commentCount_isset = YES;
  __commentList = [commentList retain];
  __commentList_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt64ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"authorID"])
  {
    __authorID = [decoder decodeInt64ForKey: @"authorID"];
    __authorID_isset = YES;
  }
  if ([decoder containsValueForKey: @"authorName"])
  {
    __authorName = [[decoder decodeObjectForKey: @"authorName"] retain];
    __authorName_isset = YES;
  }
  if ([decoder containsValueForKey: @"date"])
  {
    __date = [decoder decodeInt64ForKey: @"date"];
    __date_isset = YES;
  }
  if ([decoder containsValueForKey: @"content"])
  {
    __content = [[decoder decodeObjectForKey: @"content"] retain];
    __content_isset = YES;
  }
  if ([decoder containsValueForKey: @"commentCount"])
  {
    __commentCount = [decoder decodeInt64ForKey: @"commentCount"];
    __commentCount_isset = YES;
  }
  if ([decoder containsValueForKey: @"commentList"])
  {
    __commentList = [[decoder decodeObjectForKey: @"commentList"] retain];
    __commentList_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeInt64: __id forKey: @"id"];
  }
  if (__authorID_isset)
  {
    [encoder encodeInt64: __authorID forKey: @"authorID"];
  }
  if (__authorName_isset)
  {
    [encoder encodeObject: __authorName forKey: @"authorName"];
  }
  if (__date_isset)
  {
    [encoder encodeInt64: __date forKey: @"date"];
  }
  if (__content_isset)
  {
    [encoder encodeObject: __content forKey: @"content"];
  }
  if (__commentCount_isset)
  {
    [encoder encodeInt64: __commentCount forKey: @"commentCount"];
  }
  if (__commentList_isset)
  {
    [encoder encodeObject: __commentList forKey: @"commentList"];
  }
}

- (void) dealloc
{
  [__authorName release];
  [__content release];
  [__commentList release];
  [super dealloc];
}

- (int64_t) id {
  return __id;
}

- (void) setId: (int64_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (int64_t) authorID {
  return __authorID;
}

- (void) setAuthorID: (int64_t) authorID {
  __authorID = authorID;
  __authorID_isset = YES;
}

- (BOOL) authorIDIsSet {
  return __authorID_isset;
}

- (void) unsetAuthorID {
  __authorID_isset = NO;
}

- (NSString *) authorName {
  return [[__authorName retain] autorelease];
}

- (void) setAuthorName: (NSString *) authorName {
  [authorName retain];
  [__authorName release];
  __authorName = authorName;
  __authorName_isset = YES;
}

- (BOOL) authorNameIsSet {
  return __authorName_isset;
}

- (void) unsetAuthorName {
  [__authorName release];
  __authorName = nil;
  __authorName_isset = NO;
}

- (int64_t) date {
  return __date;
}

- (void) setDate: (int64_t) date {
  __date = date;
  __date_isset = YES;
}

- (BOOL) dateIsSet {
  return __date_isset;
}

- (void) unsetDate {
  __date_isset = NO;
}

- (NSString *) content {
  return [[__content retain] autorelease];
}

- (void) setContent: (NSString *) content {
  [content retain];
  [__content release];
  __content = content;
  __content_isset = YES;
}

- (BOOL) contentIsSet {
  return __content_isset;
}

- (void) unsetContent {
  [__content release];
  __content = nil;
  __content_isset = NO;
}

- (int64_t) commentCount {
  return __commentCount;
}

- (void) setCommentCount: (int64_t) commentCount {
  __commentCount = commentCount;
  __commentCount_isset = YES;
}

- (BOOL) commentCountIsSet {
  return __commentCount_isset;
}

- (void) unsetCommentCount {
  __commentCount_isset = NO;
}

- (NSArray *) commentList {
  return [[__commentList retain] autorelease];
}

- (void) setCommentList: (NSArray *) commentList {
  [commentList retain];
  [__commentList release];
  __commentList = commentList;
  __commentList_isset = YES;
}

- (BOOL) commentListIsSet {
  return __commentList_isset;
}

- (void) unsetCommentList {
  [__commentList release];
  __commentList = nil;
  __commentList_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setAuthorID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAuthorName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setContent: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setCommentCount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_LIST) {
          int _size20;
          [inProtocol readListBeginReturningElementType: NULL size: &_size20];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size20];
          int _i21;
          for (_i21 = 0; _i21 < _size20; ++_i21)
          {
            StatusComment *_elem22 = [[StatusComment alloc] init];
            [_elem22 read: inProtocol];
            [fieldValue addObject: _elem22];
            [_elem22 release];
          }
          [inProtocol readListEnd];
          [self setCommentList: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Status"];
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __id];
    [outProtocol writeFieldEnd];
  }
  if (__authorID_isset) {
    [outProtocol writeFieldBeginWithName: @"authorID" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __authorID];
    [outProtocol writeFieldEnd];
  }
  if (__authorName_isset) {
    if (__authorName != nil) {
      [outProtocol writeFieldBeginWithName: @"authorName" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __authorName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__date_isset) {
    [outProtocol writeFieldBeginWithName: @"date" type: TType_I64 fieldID: 4];
    [outProtocol writeI64: __date];
    [outProtocol writeFieldEnd];
  }
  if (__content_isset) {
    if (__content != nil) {
      [outProtocol writeFieldBeginWithName: @"content" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __content];
      [outProtocol writeFieldEnd];
    }
  }
  if (__commentCount_isset) {
    [outProtocol writeFieldBeginWithName: @"commentCount" type: TType_I64 fieldID: 6];
    [outProtocol writeI64: __commentCount];
    [outProtocol writeFieldEnd];
  }
  if (__commentList_isset) {
    if (__commentList != nil) {
      [outProtocol writeFieldBeginWithName: @"commentList" type: TType_LIST fieldID: 7];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__commentList count]];
        int i24;
        for (i24 = 0; i24 < [__commentList count]; i24++)
        {
          [[__commentList objectAtIndex: i24] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Status("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%qi", __id];
  [ms appendString: @",authorID:"];
  [ms appendFormat: @"%qi", __authorID];
  [ms appendString: @",authorName:"];
  [ms appendFormat: @"\"%@\"", __authorName];
  [ms appendString: @",date:"];
  [ms appendFormat: @"%qi", __date];
  [ms appendString: @",content:"];
  [ms appendFormat: @"\"%@\"", __content];
  [ms appendString: @",commentCount:"];
  [ms appendFormat: @"%qi", __commentCount];
  [ms appendString: @",commentList:"];
  [ms appendFormat: @"%@", __commentList];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Task

- (id) initWithId: (int64_t) id name: (NSString *) name intro: (NSString *) intro cid: (int) cid begin_time: (timestamp) begin_time end_time: (timestamp) end_time owner: (UserInfo *) owner user_apply_list: (NSArray *) user_apply_list user_accept_list: (NSArray *) user_accept_list user_reject_list: (NSArray *) user_reject_list
{
  self = [super init];
  __id = id;
  __id_isset = YES;
  __name = [name retain];
  __name_isset = YES;
  __intro = [intro retain];
  __intro_isset = YES;
  __cid = cid;
  __cid_isset = YES;
  __begin_time = begin_time;
  __begin_time_isset = YES;
  __end_time = end_time;
  __end_time_isset = YES;
  __owner = [owner retain];
  __owner_isset = YES;
  __user_apply_list = [user_apply_list retain];
  __user_apply_list_isset = YES;
  __user_accept_list = [user_accept_list retain];
  __user_accept_list_isset = YES;
  __user_reject_list = [user_reject_list retain];
  __user_reject_list_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt64ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"intro"])
  {
    __intro = [[decoder decodeObjectForKey: @"intro"] retain];
    __intro_isset = YES;
  }
  if ([decoder containsValueForKey: @"cid"])
  {
    __cid = [decoder decodeIntForKey: @"cid"];
    __cid_isset = YES;
  }
  if ([decoder containsValueForKey: @"begin_time"])
  {
    __begin_time = [decoder decodeInt64ForKey: @"begin_time"];
    __begin_time_isset = YES;
  }
  if ([decoder containsValueForKey: @"end_time"])
  {
    __end_time = [decoder decodeInt64ForKey: @"end_time"];
    __end_time_isset = YES;
  }
  if ([decoder containsValueForKey: @"owner"])
  {
    __owner = [[decoder decodeObjectForKey: @"owner"] retain];
    __owner_isset = YES;
  }
  if ([decoder containsValueForKey: @"user_apply_list"])
  {
    __user_apply_list = [[decoder decodeObjectForKey: @"user_apply_list"] retain];
    __user_apply_list_isset = YES;
  }
  if ([decoder containsValueForKey: @"user_accept_list"])
  {
    __user_accept_list = [[decoder decodeObjectForKey: @"user_accept_list"] retain];
    __user_accept_list_isset = YES;
  }
  if ([decoder containsValueForKey: @"user_reject_list"])
  {
    __user_reject_list = [[decoder decodeObjectForKey: @"user_reject_list"] retain];
    __user_reject_list_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeInt64: __id forKey: @"id"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__intro_isset)
  {
    [encoder encodeObject: __intro forKey: @"intro"];
  }
  if (__cid_isset)
  {
    [encoder encodeInt: __cid forKey: @"cid"];
  }
  if (__begin_time_isset)
  {
    [encoder encodeInt64: __begin_time forKey: @"begin_time"];
  }
  if (__end_time_isset)
  {
    [encoder encodeInt64: __end_time forKey: @"end_time"];
  }
  if (__owner_isset)
  {
    [encoder encodeObject: __owner forKey: @"owner"];
  }
  if (__user_apply_list_isset)
  {
    [encoder encodeObject: __user_apply_list forKey: @"user_apply_list"];
  }
  if (__user_accept_list_isset)
  {
    [encoder encodeObject: __user_accept_list forKey: @"user_accept_list"];
  }
  if (__user_reject_list_isset)
  {
    [encoder encodeObject: __user_reject_list forKey: @"user_reject_list"];
  }
}

- (void) dealloc
{
  [__name release];
  [__intro release];
  [__owner release];
  [__user_apply_list release];
  [__user_accept_list release];
  [__user_reject_list release];
  [super dealloc];
}

- (int64_t) id {
  return __id;
}

- (void) setId: (int64_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (NSString *) name {
  return [[__name retain] autorelease];
}

- (void) setName: (NSString *) name {
  [name retain];
  [__name release];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) intro {
  return [[__intro retain] autorelease];
}

- (void) setIntro: (NSString *) intro {
  [intro retain];
  [__intro release];
  __intro = intro;
  __intro_isset = YES;
}

- (BOOL) introIsSet {
  return __intro_isset;
}

- (void) unsetIntro {
  [__intro release];
  __intro = nil;
  __intro_isset = NO;
}

- (int) cid {
  return __cid;
}

- (void) setCid: (int) cid {
  __cid = cid;
  __cid_isset = YES;
}

- (BOOL) cidIsSet {
  return __cid_isset;
}

- (void) unsetCid {
  __cid_isset = NO;
}

- (int64_t) begin_time {
  return __begin_time;
}

- (void) setBegin_time: (int64_t) begin_time {
  __begin_time = begin_time;
  __begin_time_isset = YES;
}

- (BOOL) begin_timeIsSet {
  return __begin_time_isset;
}

- (void) unsetBegin_time {
  __begin_time_isset = NO;
}

- (int64_t) end_time {
  return __end_time;
}

- (void) setEnd_time: (int64_t) end_time {
  __end_time = end_time;
  __end_time_isset = YES;
}

- (BOOL) end_timeIsSet {
  return __end_time_isset;
}

- (void) unsetEnd_time {
  __end_time_isset = NO;
}

- (UserInfo *) owner {
  return [[__owner retain] autorelease];
}

- (void) setOwner: (UserInfo *) owner {
  [owner retain];
  [__owner release];
  __owner = owner;
  __owner_isset = YES;
}

- (BOOL) ownerIsSet {
  return __owner_isset;
}

- (void) unsetOwner {
  [__owner release];
  __owner = nil;
  __owner_isset = NO;
}

- (NSArray *) user_apply_list {
  return [[__user_apply_list retain] autorelease];
}

- (void) setUser_apply_list: (NSArray *) user_apply_list {
  [user_apply_list retain];
  [__user_apply_list release];
  __user_apply_list = user_apply_list;
  __user_apply_list_isset = YES;
}

- (BOOL) user_apply_listIsSet {
  return __user_apply_list_isset;
}

- (void) unsetUser_apply_list {
  [__user_apply_list release];
  __user_apply_list = nil;
  __user_apply_list_isset = NO;
}

- (NSArray *) user_accept_list {
  return [[__user_accept_list retain] autorelease];
}

- (void) setUser_accept_list: (NSArray *) user_accept_list {
  [user_accept_list retain];
  [__user_accept_list release];
  __user_accept_list = user_accept_list;
  __user_accept_list_isset = YES;
}

- (BOOL) user_accept_listIsSet {
  return __user_accept_list_isset;
}

- (void) unsetUser_accept_list {
  [__user_accept_list release];
  __user_accept_list = nil;
  __user_accept_list_isset = NO;
}

- (NSArray *) user_reject_list {
  return [[__user_reject_list retain] autorelease];
}

- (void) setUser_reject_list: (NSArray *) user_reject_list {
  [user_reject_list retain];
  [__user_reject_list release];
  __user_reject_list = user_reject_list;
  __user_reject_list_isset = YES;
}

- (BOOL) user_reject_listIsSet {
  return __user_reject_list_isset;
}

- (void) unsetUser_reject_list {
  [__user_reject_list release];
  __user_reject_list = nil;
  __user_reject_list_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIntro: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setCid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setBegin_time: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setEnd_time: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRUCT) {
          UserInfo *fieldValue = [[UserInfo alloc] init];
          [fieldValue read: inProtocol];
          [self setOwner: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_LIST) {
          int _size25;
          [inProtocol readListBeginReturningElementType: NULL size: &_size25];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size25];
          int _i26;
          for (_i26 = 0; _i26 < _size25; ++_i26)
          {
            UserInfo *_elem27 = [[UserInfo alloc] init];
            [_elem27 read: inProtocol];
            [fieldValue addObject: _elem27];
            [_elem27 release];
          }
          [inProtocol readListEnd];
          [self setUser_apply_list: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_LIST) {
          int _size28;
          [inProtocol readListBeginReturningElementType: NULL size: &_size28];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size28];
          int _i29;
          for (_i29 = 0; _i29 < _size28; ++_i29)
          {
            UserInfo *_elem30 = [[UserInfo alloc] init];
            [_elem30 read: inProtocol];
            [fieldValue addObject: _elem30];
            [_elem30 release];
          }
          [inProtocol readListEnd];
          [self setUser_accept_list: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_LIST) {
          int _size31;
          [inProtocol readListBeginReturningElementType: NULL size: &_size31];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size31];
          int _i32;
          for (_i32 = 0; _i32 < _size31; ++_i32)
          {
            UserInfo *_elem33 = [[UserInfo alloc] init];
            [_elem33 read: inProtocol];
            [fieldValue addObject: _elem33];
            [_elem33 release];
          }
          [inProtocol readListEnd];
          [self setUser_reject_list: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Task"];
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __id];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__intro_isset) {
    if (__intro != nil) {
      [outProtocol writeFieldBeginWithName: @"intro" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __intro];
      [outProtocol writeFieldEnd];
    }
  }
  if (__cid_isset) {
    [outProtocol writeFieldBeginWithName: @"cid" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __cid];
    [outProtocol writeFieldEnd];
  }
  if (__begin_time_isset) {
    [outProtocol writeFieldBeginWithName: @"begin_time" type: TType_I64 fieldID: 5];
    [outProtocol writeI64: __begin_time];
    [outProtocol writeFieldEnd];
  }
  if (__end_time_isset) {
    [outProtocol writeFieldBeginWithName: @"end_time" type: TType_I64 fieldID: 6];
    [outProtocol writeI64: __end_time];
    [outProtocol writeFieldEnd];
  }
  if (__owner_isset) {
    if (__owner != nil) {
      [outProtocol writeFieldBeginWithName: @"owner" type: TType_STRUCT fieldID: 7];
      [__owner write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__user_apply_list_isset) {
    if (__user_apply_list != nil) {
      [outProtocol writeFieldBeginWithName: @"user_apply_list" type: TType_LIST fieldID: 8];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__user_apply_list count]];
        int i35;
        for (i35 = 0; i35 < [__user_apply_list count]; i35++)
        {
          [[__user_apply_list objectAtIndex: i35] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__user_accept_list_isset) {
    if (__user_accept_list != nil) {
      [outProtocol writeFieldBeginWithName: @"user_accept_list" type: TType_LIST fieldID: 11];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__user_accept_list count]];
        int i37;
        for (i37 = 0; i37 < [__user_accept_list count]; i37++)
        {
          [[__user_accept_list objectAtIndex: i37] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__user_reject_list_isset) {
    if (__user_reject_list != nil) {
      [outProtocol writeFieldBeginWithName: @"user_reject_list" type: TType_LIST fieldID: 12];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__user_reject_list count]];
        int i39;
        for (i39 = 0; i39 < [__user_reject_list count]; i39++)
        {
          [[__user_reject_list objectAtIndex: i39] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Task("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%qi", __id];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",intro:"];
  [ms appendFormat: @"\"%@\"", __intro];
  [ms appendString: @",cid:"];
  [ms appendFormat: @"%i", __cid];
  [ms appendString: @",begin_time:"];
  [ms appendFormat: @"%qi", __begin_time];
  [ms appendString: @",end_time:"];
  [ms appendFormat: @"%qi", __end_time];
  [ms appendString: @",owner:"];
  [ms appendFormat: @"%@", __owner];
  [ms appendString: @",user_apply_list:"];
  [ms appendFormat: @"%@", __user_apply_list];
  [ms appendString: @",user_accept_list:"];
  [ms appendFormat: @"%@", __user_accept_list];
  [ms appendString: @",user_reject_list:"];
  [ms appendFormat: @"%@", __user_reject_list];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation typeConstants
+ (void) initialize {
}
@end


/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import <TProtocol.h>
#import <TApplicationException.h>
#import <TProtocolUtil.h>
#import <TProcessor.h>


#import "type.h"

@implementation AuthRequestMail

- (id) initWithClient_id: (NSString *) client_id client_secret: (NSString *) client_secret mail: (NSString *) mail password: (NSString *) password
{
  self = [super init];
  __client_id = [client_id retain];
  __client_id_isset = YES;
  __client_secret = [client_secret retain];
  __client_secret_isset = YES;
  __mail = [mail retain];
  __mail_isset = YES;
  __password = [password retain];
  __password_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"client_id"])
  {
    __client_id = [[decoder decodeObjectForKey: @"client_id"] retain];
    __client_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"client_secret"])
  {
    __client_secret = [[decoder decodeObjectForKey: @"client_secret"] retain];
    __client_secret_isset = YES;
  }
  if ([decoder containsValueForKey: @"mail"])
  {
    __mail = [[decoder decodeObjectForKey: @"mail"] retain];
    __mail_isset = YES;
  }
  if ([decoder containsValueForKey: @"password"])
  {
    __password = [[decoder decodeObjectForKey: @"password"] retain];
    __password_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__client_id_isset)
  {
    [encoder encodeObject: __client_id forKey: @"client_id"];
  }
  if (__client_secret_isset)
  {
    [encoder encodeObject: __client_secret forKey: @"client_secret"];
  }
  if (__mail_isset)
  {
    [encoder encodeObject: __mail forKey: @"mail"];
  }
  if (__password_isset)
  {
    [encoder encodeObject: __password forKey: @"password"];
  }
}

- (void) dealloc
{
  [__client_id release];
  [__client_secret release];
  [__mail release];
  [__password release];
  [super dealloc];
}

- (NSString *) client_id {
  return [[__client_id retain] autorelease];
}

- (void) setClient_id: (NSString *) client_id {
  [client_id retain];
  [__client_id release];
  __client_id = client_id;
  __client_id_isset = YES;
}

- (BOOL) client_idIsSet {
  return __client_id_isset;
}

- (void) unsetClient_id {
  [__client_id release];
  __client_id = nil;
  __client_id_isset = NO;
}

- (NSString *) client_secret {
  return [[__client_secret retain] autorelease];
}

- (void) setClient_secret: (NSString *) client_secret {
  [client_secret retain];
  [__client_secret release];
  __client_secret = client_secret;
  __client_secret_isset = YES;
}

- (BOOL) client_secretIsSet {
  return __client_secret_isset;
}

- (void) unsetClient_secret {
  [__client_secret release];
  __client_secret = nil;
  __client_secret_isset = NO;
}

- (NSString *) mail {
  return [[__mail retain] autorelease];
}

- (void) setMail: (NSString *) mail {
  [mail retain];
  [__mail release];
  __mail = mail;
  __mail_isset = YES;
}

- (BOOL) mailIsSet {
  return __mail_isset;
}

- (void) unsetMail {
  [__mail release];
  __mail = nil;
  __mail_isset = NO;
}

- (NSString *) password {
  return [[__password retain] autorelease];
}

- (void) setPassword: (NSString *) password {
  [password retain];
  [__password release];
  __password = password;
  __password_isset = YES;
}

- (BOOL) passwordIsSet {
  return __password_isset;
}

- (void) unsetPassword {
  [__password release];
  __password = nil;
  __password_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setClient_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setClient_secret: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMail: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPassword: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AuthRequestMail"];
  if (__client_id_isset) {
    if (__client_id != nil) {
      [outProtocol writeFieldBeginWithName: @"client_id" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __client_id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__client_secret_isset) {
    if (__client_secret != nil) {
      [outProtocol writeFieldBeginWithName: @"client_secret" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __client_secret];
      [outProtocol writeFieldEnd];
    }
  }
  if (__mail_isset) {
    if (__mail != nil) {
      [outProtocol writeFieldBeginWithName: @"mail" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __mail];
      [outProtocol writeFieldEnd];
    }
  }
  if (__password_isset) {
    if (__password != nil) {
      [outProtocol writeFieldBeginWithName: @"password" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __password];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AuthRequestMail("];
  [ms appendString: @"client_id:"];
  [ms appendFormat: @"\"%@\"", __client_id];
  [ms appendString: @",client_secret:"];
  [ms appendFormat: @"\"%@\"", __client_secret];
  [ms appendString: @",mail:"];
  [ms appendFormat: @"\"%@\"", __mail];
  [ms appendString: @",password:"];
  [ms appendFormat: @"\"%@\"", __password];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AuthRequestPartner

- (id) initWithClient_id: (NSString *) client_id client_secret: (NSString *) client_secret partner: (int) partner access_token: (NSString *) access_token mail: (NSString *) mail
{
  self = [super init];
  __client_id = [client_id retain];
  __client_id_isset = YES;
  __client_secret = [client_secret retain];
  __client_secret_isset = YES;
  __partner = partner;
  __partner_isset = YES;
  __access_token = [access_token retain];
  __access_token_isset = YES;
  __mail = [mail retain];
  __mail_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"client_id"])
  {
    __client_id = [[decoder decodeObjectForKey: @"client_id"] retain];
    __client_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"client_secret"])
  {
    __client_secret = [[decoder decodeObjectForKey: @"client_secret"] retain];
    __client_secret_isset = YES;
  }
  if ([decoder containsValueForKey: @"partner"])
  {
    __partner = [decoder decodeIntForKey: @"partner"];
    __partner_isset = YES;
  }
  if ([decoder containsValueForKey: @"access_token"])
  {
    __access_token = [[decoder decodeObjectForKey: @"access_token"] retain];
    __access_token_isset = YES;
  }
  if ([decoder containsValueForKey: @"mail"])
  {
    __mail = [[decoder decodeObjectForKey: @"mail"] retain];
    __mail_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__client_id_isset)
  {
    [encoder encodeObject: __client_id forKey: @"client_id"];
  }
  if (__client_secret_isset)
  {
    [encoder encodeObject: __client_secret forKey: @"client_secret"];
  }
  if (__partner_isset)
  {
    [encoder encodeInt: __partner forKey: @"partner"];
  }
  if (__access_token_isset)
  {
    [encoder encodeObject: __access_token forKey: @"access_token"];
  }
  if (__mail_isset)
  {
    [encoder encodeObject: __mail forKey: @"mail"];
  }
}

- (void) dealloc
{
  [__client_id release];
  [__client_secret release];
  [__access_token release];
  [__mail release];
  [super dealloc];
}

- (NSString *) client_id {
  return [[__client_id retain] autorelease];
}

- (void) setClient_id: (NSString *) client_id {
  [client_id retain];
  [__client_id release];
  __client_id = client_id;
  __client_id_isset = YES;
}

- (BOOL) client_idIsSet {
  return __client_id_isset;
}

- (void) unsetClient_id {
  [__client_id release];
  __client_id = nil;
  __client_id_isset = NO;
}

- (NSString *) client_secret {
  return [[__client_secret retain] autorelease];
}

- (void) setClient_secret: (NSString *) client_secret {
  [client_secret retain];
  [__client_secret release];
  __client_secret = client_secret;
  __client_secret_isset = YES;
}

- (BOOL) client_secretIsSet {
  return __client_secret_isset;
}

- (void) unsetClient_secret {
  [__client_secret release];
  __client_secret = nil;
  __client_secret_isset = NO;
}

- (int) partner {
  return __partner;
}

- (void) setPartner: (int) partner {
  __partner = partner;
  __partner_isset = YES;
}

- (BOOL) partnerIsSet {
  return __partner_isset;
}

- (void) unsetPartner {
  __partner_isset = NO;
}

- (NSString *) access_token {
  return [[__access_token retain] autorelease];
}

- (void) setAccess_token: (NSString *) access_token {
  [access_token retain];
  [__access_token release];
  __access_token = access_token;
  __access_token_isset = YES;
}

- (BOOL) access_tokenIsSet {
  return __access_token_isset;
}

- (void) unsetAccess_token {
  [__access_token release];
  __access_token = nil;
  __access_token_isset = NO;
}

- (NSString *) mail {
  return [[__mail retain] autorelease];
}

- (void) setMail: (NSString *) mail {
  [mail retain];
  [__mail release];
  __mail = mail;
  __mail_isset = YES;
}

- (BOOL) mailIsSet {
  return __mail_isset;
}

- (void) unsetMail {
  [__mail release];
  __mail = nil;
  __mail_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setClient_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setClient_secret: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setPartner: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAccess_token: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMail: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AuthRequestPartner"];
  if (__client_id_isset) {
    if (__client_id != nil) {
      [outProtocol writeFieldBeginWithName: @"client_id" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __client_id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__client_secret_isset) {
    if (__client_secret != nil) {
      [outProtocol writeFieldBeginWithName: @"client_secret" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __client_secret];
      [outProtocol writeFieldEnd];
    }
  }
  if (__partner_isset) {
    [outProtocol writeFieldBeginWithName: @"partner" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __partner];
    [outProtocol writeFieldEnd];
  }
  if (__access_token_isset) {
    if (__access_token != nil) {
      [outProtocol writeFieldBeginWithName: @"access_token" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __access_token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__mail_isset) {
    if (__mail != nil) {
      [outProtocol writeFieldBeginWithName: @"mail" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __mail];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AuthRequestPartner("];
  [ms appendString: @"client_id:"];
  [ms appendFormat: @"\"%@\"", __client_id];
  [ms appendString: @",client_secret:"];
  [ms appendFormat: @"\"%@\"", __client_secret];
  [ms appendString: @",partner:"];
  [ms appendFormat: @"%i", __partner];
  [ms appendString: @",access_token:"];
  [ms appendFormat: @"\"%@\"", __access_token];
  [ms appendString: @",mail:"];
  [ms appendFormat: @"\"%@\"", __mail];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AuthResponse

- (id) initWithId: (int64_t) id name: (NSString *) name access_token: (NSString *) access_token refresh_token: (NSString *) refresh_token expire_time: (int64_t) expire_time
{
  self = [super init];
  __id = id;
  __id_isset = YES;
  __name = [name retain];
  __name_isset = YES;
  __access_token = [access_token retain];
  __access_token_isset = YES;
  __refresh_token = [refresh_token retain];
  __refresh_token_isset = YES;
  __expire_time = expire_time;
  __expire_time_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt64ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"access_token"])
  {
    __access_token = [[decoder decodeObjectForKey: @"access_token"] retain];
    __access_token_isset = YES;
  }
  if ([decoder containsValueForKey: @"refresh_token"])
  {
    __refresh_token = [[decoder decodeObjectForKey: @"refresh_token"] retain];
    __refresh_token_isset = YES;
  }
  if ([decoder containsValueForKey: @"expire_time"])
  {
    __expire_time = [decoder decodeInt64ForKey: @"expire_time"];
    __expire_time_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeInt64: __id forKey: @"id"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__access_token_isset)
  {
    [encoder encodeObject: __access_token forKey: @"access_token"];
  }
  if (__refresh_token_isset)
  {
    [encoder encodeObject: __refresh_token forKey: @"refresh_token"];
  }
  if (__expire_time_isset)
  {
    [encoder encodeInt64: __expire_time forKey: @"expire_time"];
  }
}

- (void) dealloc
{
  [__name release];
  [__access_token release];
  [__refresh_token release];
  [super dealloc];
}

- (int64_t) id {
  return __id;
}

- (void) setId: (int64_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (NSString *) name {
  return [[__name retain] autorelease];
}

- (void) setName: (NSString *) name {
  [name retain];
  [__name release];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) access_token {
  return [[__access_token retain] autorelease];
}

- (void) setAccess_token: (NSString *) access_token {
  [access_token retain];
  [__access_token release];
  __access_token = access_token;
  __access_token_isset = YES;
}

- (BOOL) access_tokenIsSet {
  return __access_token_isset;
}

- (void) unsetAccess_token {
  [__access_token release];
  __access_token = nil;
  __access_token_isset = NO;
}

- (NSString *) refresh_token {
  return [[__refresh_token retain] autorelease];
}

- (void) setRefresh_token: (NSString *) refresh_token {
  [refresh_token retain];
  [__refresh_token release];
  __refresh_token = refresh_token;
  __refresh_token_isset = YES;
}

- (BOOL) refresh_tokenIsSet {
  return __refresh_token_isset;
}

- (void) unsetRefresh_token {
  [__refresh_token release];
  __refresh_token = nil;
  __refresh_token_isset = NO;
}

- (int64_t) expire_time {
  return __expire_time;
}

- (void) setExpire_time: (int64_t) expire_time {
  __expire_time = expire_time;
  __expire_time_isset = YES;
}

- (BOOL) expire_timeIsSet {
  return __expire_time_isset;
}

- (void) unsetExpire_time {
  __expire_time_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAccess_token: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRefresh_token: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setExpire_time: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AuthResponse"];
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __id];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__access_token_isset) {
    if (__access_token != nil) {
      [outProtocol writeFieldBeginWithName: @"access_token" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __access_token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__refresh_token_isset) {
    if (__refresh_token != nil) {
      [outProtocol writeFieldBeginWithName: @"refresh_token" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __refresh_token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__expire_time_isset) {
    [outProtocol writeFieldBeginWithName: @"expire_time" type: TType_I64 fieldID: 5];
    [outProtocol writeI64: __expire_time];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AuthResponse("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%qi", __id];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",access_token:"];
  [ms appendFormat: @"\"%@\"", __access_token];
  [ms appendString: @",refresh_token:"];
  [ms appendFormat: @"\"%@\"", __refresh_token];
  [ms appendString: @",expire_time:"];
  [ms appendFormat: @"%qi", __expire_time];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation UserInfoBasic

- (id) initWithId: (int64_t) id nickname: (NSString *) nickname avatar: (NSString *) avatar
{
  self = [super init];
  __id = id;
  __id_isset = YES;
  __nickname = [nickname retain];
  __nickname_isset = YES;
  __avatar = [avatar retain];
  __avatar_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt64ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"nickname"])
  {
    __nickname = [[decoder decodeObjectForKey: @"nickname"] retain];
    __nickname_isset = YES;
  }
  if ([decoder containsValueForKey: @"avatar"])
  {
    __avatar = [[decoder decodeObjectForKey: @"avatar"] retain];
    __avatar_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeInt64: __id forKey: @"id"];
  }
  if (__nickname_isset)
  {
    [encoder encodeObject: __nickname forKey: @"nickname"];
  }
  if (__avatar_isset)
  {
    [encoder encodeObject: __avatar forKey: @"avatar"];
  }
}

- (void) dealloc
{
  [__nickname release];
  [__avatar release];
  [super dealloc];
}

- (int64_t) id {
  return __id;
}

- (void) setId: (int64_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (NSString *) nickname {
  return [[__nickname retain] autorelease];
}

- (void) setNickname: (NSString *) nickname {
  [nickname retain];
  [__nickname release];
  __nickname = nickname;
  __nickname_isset = YES;
}

- (BOOL) nicknameIsSet {
  return __nickname_isset;
}

- (void) unsetNickname {
  [__nickname release];
  __nickname = nil;
  __nickname_isset = NO;
}

- (NSString *) avatar {
  return [[__avatar retain] autorelease];
}

- (void) setAvatar: (NSString *) avatar {
  [avatar retain];
  [__avatar release];
  __avatar = avatar;
  __avatar_isset = YES;
}

- (BOOL) avatarIsSet {
  return __avatar_isset;
}

- (void) unsetAvatar {
  [__avatar release];
  __avatar = nil;
  __avatar_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setNickname: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAvatar: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"UserInfoBasic"];
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __id];
    [outProtocol writeFieldEnd];
  }
  if (__nickname_isset) {
    if (__nickname != nil) {
      [outProtocol writeFieldBeginWithName: @"nickname" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __nickname];
      [outProtocol writeFieldEnd];
    }
  }
  if (__avatar_isset) {
    if (__avatar != nil) {
      [outProtocol writeFieldBeginWithName: @"avatar" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __avatar];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"UserInfoBasic("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%qi", __id];
  [ms appendString: @",nickname:"];
  [ms appendFormat: @"\"%@\"", __nickname];
  [ms appendString: @",avatar:"];
  [ms appendFormat: @"\"%@\"", __avatar];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation UserInfoDetail

- (id) initWithFirstname: (NSString *) firstname lastname: (NSString *) lastname gender: (NSString *) gender birthday: (timestamp) birthday location: (NSString *) location org: (NSString *) org job: (NSString *) job
{
  self = [super init];
  __firstname = [firstname retain];
  __firstname_isset = YES;
  __lastname = [lastname retain];
  __lastname_isset = YES;
  __gender = [gender retain];
  __gender_isset = YES;
  __birthday = birthday;
  __birthday_isset = YES;
  __location = [location retain];
  __location_isset = YES;
  __org = [org retain];
  __org_isset = YES;
  __job = [job retain];
  __job_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"firstname"])
  {
    __firstname = [[decoder decodeObjectForKey: @"firstname"] retain];
    __firstname_isset = YES;
  }
  if ([decoder containsValueForKey: @"lastname"])
  {
    __lastname = [[decoder decodeObjectForKey: @"lastname"] retain];
    __lastname_isset = YES;
  }
  if ([decoder containsValueForKey: @"gender"])
  {
    __gender = [[decoder decodeObjectForKey: @"gender"] retain];
    __gender_isset = YES;
  }
  if ([decoder containsValueForKey: @"birthday"])
  {
    __birthday = [decoder decodeInt64ForKey: @"birthday"];
    __birthday_isset = YES;
  }
  if ([decoder containsValueForKey: @"location"])
  {
    __location = [[decoder decodeObjectForKey: @"location"] retain];
    __location_isset = YES;
  }
  if ([decoder containsValueForKey: @"org"])
  {
    __org = [[decoder decodeObjectForKey: @"org"] retain];
    __org_isset = YES;
  }
  if ([decoder containsValueForKey: @"job"])
  {
    __job = [[decoder decodeObjectForKey: @"job"] retain];
    __job_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__firstname_isset)
  {
    [encoder encodeObject: __firstname forKey: @"firstname"];
  }
  if (__lastname_isset)
  {
    [encoder encodeObject: __lastname forKey: @"lastname"];
  }
  if (__gender_isset)
  {
    [encoder encodeObject: __gender forKey: @"gender"];
  }
  if (__birthday_isset)
  {
    [encoder encodeInt64: __birthday forKey: @"birthday"];
  }
  if (__location_isset)
  {
    [encoder encodeObject: __location forKey: @"location"];
  }
  if (__org_isset)
  {
    [encoder encodeObject: __org forKey: @"org"];
  }
  if (__job_isset)
  {
    [encoder encodeObject: __job forKey: @"job"];
  }
}

- (void) dealloc
{
  [__firstname release];
  [__lastname release];
  [__gender release];
  [__location release];
  [__org release];
  [__job release];
  [super dealloc];
}

- (NSString *) firstname {
  return [[__firstname retain] autorelease];
}

- (void) setFirstname: (NSString *) firstname {
  [firstname retain];
  [__firstname release];
  __firstname = firstname;
  __firstname_isset = YES;
}

- (BOOL) firstnameIsSet {
  return __firstname_isset;
}

- (void) unsetFirstname {
  [__firstname release];
  __firstname = nil;
  __firstname_isset = NO;
}

- (NSString *) lastname {
  return [[__lastname retain] autorelease];
}

- (void) setLastname: (NSString *) lastname {
  [lastname retain];
  [__lastname release];
  __lastname = lastname;
  __lastname_isset = YES;
}

- (BOOL) lastnameIsSet {
  return __lastname_isset;
}

- (void) unsetLastname {
  [__lastname release];
  __lastname = nil;
  __lastname_isset = NO;
}

- (NSString *) gender {
  return [[__gender retain] autorelease];
}

- (void) setGender: (NSString *) gender {
  [gender retain];
  [__gender release];
  __gender = gender;
  __gender_isset = YES;
}

- (BOOL) genderIsSet {
  return __gender_isset;
}

- (void) unsetGender {
  [__gender release];
  __gender = nil;
  __gender_isset = NO;
}

- (int64_t) birthday {
  return __birthday;
}

- (void) setBirthday: (int64_t) birthday {
  __birthday = birthday;
  __birthday_isset = YES;
}

- (BOOL) birthdayIsSet {
  return __birthday_isset;
}

- (void) unsetBirthday {
  __birthday_isset = NO;
}

- (NSString *) location {
  return [[__location retain] autorelease];
}

- (void) setLocation: (NSString *) location {
  [location retain];
  [__location release];
  __location = location;
  __location_isset = YES;
}

- (BOOL) locationIsSet {
  return __location_isset;
}

- (void) unsetLocation {
  [__location release];
  __location = nil;
  __location_isset = NO;
}

- (NSString *) org {
  return [[__org retain] autorelease];
}

- (void) setOrg: (NSString *) org {
  [org retain];
  [__org release];
  __org = org;
  __org_isset = YES;
}

- (BOOL) orgIsSet {
  return __org_isset;
}

- (void) unsetOrg {
  [__org release];
  __org = nil;
  __org_isset = NO;
}

- (NSString *) job {
  return [[__job retain] autorelease];
}

- (void) setJob: (NSString *) job {
  [job retain];
  [__job release];
  __job = job;
  __job_isset = YES;
}

- (BOOL) jobIsSet {
  return __job_isset;
}

- (void) unsetJob {
  [__job release];
  __job = nil;
  __job_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFirstname: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLastname: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setGender: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setBirthday: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLocation: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOrg: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setJob: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"UserInfoDetail"];
  if (__firstname_isset) {
    if (__firstname != nil) {
      [outProtocol writeFieldBeginWithName: @"firstname" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __firstname];
      [outProtocol writeFieldEnd];
    }
  }
  if (__lastname_isset) {
    if (__lastname != nil) {
      [outProtocol writeFieldBeginWithName: @"lastname" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __lastname];
      [outProtocol writeFieldEnd];
    }
  }
  if (__gender_isset) {
    if (__gender != nil) {
      [outProtocol writeFieldBeginWithName: @"gender" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __gender];
      [outProtocol writeFieldEnd];
    }
  }
  if (__birthday_isset) {
    [outProtocol writeFieldBeginWithName: @"birthday" type: TType_I64 fieldID: 4];
    [outProtocol writeI64: __birthday];
    [outProtocol writeFieldEnd];
  }
  if (__location_isset) {
    if (__location != nil) {
      [outProtocol writeFieldBeginWithName: @"location" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __location];
      [outProtocol writeFieldEnd];
    }
  }
  if (__org_isset) {
    if (__org != nil) {
      [outProtocol writeFieldBeginWithName: @"org" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __org];
      [outProtocol writeFieldEnd];
    }
  }
  if (__job_isset) {
    if (__job != nil) {
      [outProtocol writeFieldBeginWithName: @"job" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __job];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"UserInfoDetail("];
  [ms appendString: @"firstname:"];
  [ms appendFormat: @"\"%@\"", __firstname];
  [ms appendString: @",lastname:"];
  [ms appendFormat: @"\"%@\"", __lastname];
  [ms appendString: @",gender:"];
  [ms appendFormat: @"\"%@\"", __gender];
  [ms appendString: @",birthday:"];
  [ms appendFormat: @"%qi", __birthday];
  [ms appendString: @",location:"];
  [ms appendFormat: @"\"%@\"", __location];
  [ms appendString: @",org:"];
  [ms appendFormat: @"\"%@\"", __org];
  [ms appendString: @",job:"];
  [ms appendFormat: @"\"%@\"", __job];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation UserInfoIntro

- (id) initWithMotto: (NSString *) motto introduction: (NSString *) introduction
{
  self = [super init];
  __motto = [motto retain];
  __motto_isset = YES;
  __introduction = [introduction retain];
  __introduction_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"motto"])
  {
    __motto = [[decoder decodeObjectForKey: @"motto"] retain];
    __motto_isset = YES;
  }
  if ([decoder containsValueForKey: @"introduction"])
  {
    __introduction = [[decoder decodeObjectForKey: @"introduction"] retain];
    __introduction_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__motto_isset)
  {
    [encoder encodeObject: __motto forKey: @"motto"];
  }
  if (__introduction_isset)
  {
    [encoder encodeObject: __introduction forKey: @"introduction"];
  }
}

- (void) dealloc
{
  [__motto release];
  [__introduction release];
  [super dealloc];
}

- (NSString *) motto {
  return [[__motto retain] autorelease];
}

- (void) setMotto: (NSString *) motto {
  [motto retain];
  [__motto release];
  __motto = motto;
  __motto_isset = YES;
}

- (BOOL) mottoIsSet {
  return __motto_isset;
}

- (void) unsetMotto {
  [__motto release];
  __motto = nil;
  __motto_isset = NO;
}

- (NSString *) introduction {
  return [[__introduction retain] autorelease];
}

- (void) setIntroduction: (NSString *) introduction {
  [introduction retain];
  [__introduction release];
  __introduction = introduction;
  __introduction_isset = YES;
}

- (BOOL) introductionIsSet {
  return __introduction_isset;
}

- (void) unsetIntroduction {
  [__introduction release];
  __introduction = nil;
  __introduction_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMotto: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIntroduction: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"UserInfoIntro"];
  if (__motto_isset) {
    if (__motto != nil) {
      [outProtocol writeFieldBeginWithName: @"motto" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __motto];
      [outProtocol writeFieldEnd];
    }
  }
  if (__introduction_isset) {
    if (__introduction != nil) {
      [outProtocol writeFieldBeginWithName: @"introduction" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __introduction];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"UserInfoIntro("];
  [ms appendString: @"motto:"];
  [ms appendFormat: @"\"%@\"", __motto];
  [ms appendString: @",introduction:"];
  [ms appendFormat: @"\"%@\"", __introduction];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation UserInfo

- (id) initWithBasic: (UserInfoBasic *) basic detail: (UserInfoDetail *) detail intro: (UserInfoIntro *) intro
{
  self = [super init];
  __basic = [basic retain];
  __basic_isset = YES;
  __detail = [detail retain];
  __detail_isset = YES;
  __intro = [intro retain];
  __intro_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"basic"])
  {
    __basic = [[decoder decodeObjectForKey: @"basic"] retain];
    __basic_isset = YES;
  }
  if ([decoder containsValueForKey: @"detail"])
  {
    __detail = [[decoder decodeObjectForKey: @"detail"] retain];
    __detail_isset = YES;
  }
  if ([decoder containsValueForKey: @"intro"])
  {
    __intro = [[decoder decodeObjectForKey: @"intro"] retain];
    __intro_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__basic_isset)
  {
    [encoder encodeObject: __basic forKey: @"basic"];
  }
  if (__detail_isset)
  {
    [encoder encodeObject: __detail forKey: @"detail"];
  }
  if (__intro_isset)
  {
    [encoder encodeObject: __intro forKey: @"intro"];
  }
}

- (void) dealloc
{
  [__basic release];
  [__detail release];
  [__intro release];
  [super dealloc];
}

- (UserInfoBasic *) basic {
  return [[__basic retain] autorelease];
}

- (void) setBasic: (UserInfoBasic *) basic {
  [basic retain];
  [__basic release];
  __basic = basic;
  __basic_isset = YES;
}

- (BOOL) basicIsSet {
  return __basic_isset;
}

- (void) unsetBasic {
  [__basic release];
  __basic = nil;
  __basic_isset = NO;
}

- (UserInfoDetail *) detail {
  return [[__detail retain] autorelease];
}

- (void) setDetail: (UserInfoDetail *) detail {
  [detail retain];
  [__detail release];
  __detail = detail;
  __detail_isset = YES;
}

- (BOOL) detailIsSet {
  return __detail_isset;
}

- (void) unsetDetail {
  [__detail release];
  __detail = nil;
  __detail_isset = NO;
}

- (UserInfoIntro *) intro {
  return [[__intro retain] autorelease];
}

- (void) setIntro: (UserInfoIntro *) intro {
  [intro retain];
  [__intro release];
  __intro = intro;
  __intro_isset = YES;
}

- (BOOL) introIsSet {
  return __intro_isset;
}

- (void) unsetIntro {
  [__intro release];
  __intro = nil;
  __intro_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          UserInfoBasic *fieldValue = [[UserInfoBasic alloc] init];
          [fieldValue read: inProtocol];
          [self setBasic: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          UserInfoDetail *fieldValue = [[UserInfoDetail alloc] init];
          [fieldValue read: inProtocol];
          [self setDetail: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          UserInfoIntro *fieldValue = [[UserInfoIntro alloc] init];
          [fieldValue read: inProtocol];
          [self setIntro: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"UserInfo"];
  if (__basic_isset) {
    if (__basic != nil) {
      [outProtocol writeFieldBeginWithName: @"basic" type: TType_STRUCT fieldID: 1];
      [__basic write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__detail_isset) {
    if (__detail != nil) {
      [outProtocol writeFieldBeginWithName: @"detail" type: TType_STRUCT fieldID: 2];
      [__detail write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__intro_isset) {
    if (__intro != nil) {
      [outProtocol writeFieldBeginWithName: @"intro" type: TType_STRUCT fieldID: 3];
      [__intro write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"UserInfo("];
  [ms appendString: @"basic:"];
  [ms appendFormat: @"%@", __basic];
  [ms appendString: @",detail:"];
  [ms appendFormat: @"%@", __detail];
  [ms appendString: @",intro:"];
  [ms appendFormat: @"%@", __intro];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation UserContactLink

- (id) initWithId: (int64_t) id type: (int) type value: (NSString *) value label: (NSString *) label
{
  self = [super init];
  __id = id;
  __id_isset = YES;
  __type = type;
  __type_isset = YES;
  __value = [value retain];
  __value_isset = YES;
  __label = [label retain];
  __label_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt64ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [decoder decodeIntForKey: @"type"];
    __type_isset = YES;
  }
  if ([decoder containsValueForKey: @"value"])
  {
    __value = [[decoder decodeObjectForKey: @"value"] retain];
    __value_isset = YES;
  }
  if ([decoder containsValueForKey: @"label"])
  {
    __label = [[decoder decodeObjectForKey: @"label"] retain];
    __label_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeInt64: __id forKey: @"id"];
  }
  if (__type_isset)
  {
    [encoder encodeInt: __type forKey: @"type"];
  }
  if (__value_isset)
  {
    [encoder encodeObject: __value forKey: @"value"];
  }
  if (__label_isset)
  {
    [encoder encodeObject: __label forKey: @"label"];
  }
}

- (void) dealloc
{
  [__value release];
  [__label release];
  [super dealloc];
}

- (int64_t) id {
  return __id;
}

- (void) setId: (int64_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (int) type {
  return __type;
}

- (void) setType: (int) type {
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  __type_isset = NO;
}

- (NSString *) value {
  return [[__value retain] autorelease];
}

- (void) setValue: (NSString *) value {
  [value retain];
  [__value release];
  __value = value;
  __value_isset = YES;
}

- (BOOL) valueIsSet {
  return __value_isset;
}

- (void) unsetValue {
  [__value release];
  __value = nil;
  __value_isset = NO;
}

- (NSString *) label {
  return [[__label retain] autorelease];
}

- (void) setLabel: (NSString *) label {
  [label retain];
  [__label release];
  __label = label;
  __label_isset = YES;
}

- (BOOL) labelIsSet {
  return __label_isset;
}

- (void) unsetLabel {
  [__label release];
  __label = nil;
  __label_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setValue: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLabel: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"UserContactLink"];
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __id];
    [outProtocol writeFieldEnd];
  }
  if (__type_isset) {
    [outProtocol writeFieldBeginWithName: @"type" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __type];
    [outProtocol writeFieldEnd];
  }
  if (__value_isset) {
    if (__value != nil) {
      [outProtocol writeFieldBeginWithName: @"value" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __value];
      [outProtocol writeFieldEnd];
    }
  }
  if (__label_isset) {
    if (__label != nil) {
      [outProtocol writeFieldBeginWithName: @"label" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __label];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"UserContactLink("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%qi", __id];
  [ms appendString: @",type:"];
  [ms appendFormat: @"%i", __type];
  [ms appendString: @",value:"];
  [ms appendFormat: @"\"%@\"", __value];
  [ms appendString: @",label:"];
  [ms appendFormat: @"\"%@\"", __label];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation UserContactPhone

- (id) initWithId: (int64_t) id type: (int) type value: (NSString *) value label: (NSString *) label
{
  self = [super init];
  __id = id;
  __id_isset = YES;
  __type = type;
  __type_isset = YES;
  __value = [value retain];
  __value_isset = YES;
  __label = [label retain];
  __label_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt64ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [decoder decodeIntForKey: @"type"];
    __type_isset = YES;
  }
  if ([decoder containsValueForKey: @"value"])
  {
    __value = [[decoder decodeObjectForKey: @"value"] retain];
    __value_isset = YES;
  }
  if ([decoder containsValueForKey: @"label"])
  {
    __label = [[decoder decodeObjectForKey: @"label"] retain];
    __label_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeInt64: __id forKey: @"id"];
  }
  if (__type_isset)
  {
    [encoder encodeInt: __type forKey: @"type"];
  }
  if (__value_isset)
  {
    [encoder encodeObject: __value forKey: @"value"];
  }
  if (__label_isset)
  {
    [encoder encodeObject: __label forKey: @"label"];
  }
}

- (void) dealloc
{
  [__value release];
  [__label release];
  [super dealloc];
}

- (int64_t) id {
  return __id;
}

- (void) setId: (int64_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (int) type {
  return __type;
}

- (void) setType: (int) type {
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  __type_isset = NO;
}

- (NSString *) value {
  return [[__value retain] autorelease];
}

- (void) setValue: (NSString *) value {
  [value retain];
  [__value release];
  __value = value;
  __value_isset = YES;
}

- (BOOL) valueIsSet {
  return __value_isset;
}

- (void) unsetValue {
  [__value release];
  __value = nil;
  __value_isset = NO;
}

- (NSString *) label {
  return [[__label retain] autorelease];
}

- (void) setLabel: (NSString *) label {
  [label retain];
  [__label release];
  __label = label;
  __label_isset = YES;
}

- (BOOL) labelIsSet {
  return __label_isset;
}

- (void) unsetLabel {
  [__label release];
  __label = nil;
  __label_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setValue: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLabel: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"UserContactPhone"];
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __id];
    [outProtocol writeFieldEnd];
  }
  if (__type_isset) {
    [outProtocol writeFieldBeginWithName: @"type" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __type];
    [outProtocol writeFieldEnd];
  }
  if (__value_isset) {
    if (__value != nil) {
      [outProtocol writeFieldBeginWithName: @"value" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __value];
      [outProtocol writeFieldEnd];
    }
  }
  if (__label_isset) {
    if (__label != nil) {
      [outProtocol writeFieldBeginWithName: @"label" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __label];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"UserContactPhone("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%qi", __id];
  [ms appendString: @",type:"];
  [ms appendFormat: @"%i", __type];
  [ms appendString: @",value:"];
  [ms appendFormat: @"\"%@\"", __value];
  [ms appendString: @",label:"];
  [ms appendFormat: @"\"%@\"", __label];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation UserContactMail

- (id) initWithId: (int64_t) id type: (int) type value: (NSString *) value label: (NSString *) label
{
  self = [super init];
  __id = id;
  __id_isset = YES;
  __type = type;
  __type_isset = YES;
  __value = [value retain];
  __value_isset = YES;
  __label = [label retain];
  __label_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt64ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [decoder decodeIntForKey: @"type"];
    __type_isset = YES;
  }
  if ([decoder containsValueForKey: @"value"])
  {
    __value = [[decoder decodeObjectForKey: @"value"] retain];
    __value_isset = YES;
  }
  if ([decoder containsValueForKey: @"label"])
  {
    __label = [[decoder decodeObjectForKey: @"label"] retain];
    __label_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeInt64: __id forKey: @"id"];
  }
  if (__type_isset)
  {
    [encoder encodeInt: __type forKey: @"type"];
  }
  if (__value_isset)
  {
    [encoder encodeObject: __value forKey: @"value"];
  }
  if (__label_isset)
  {
    [encoder encodeObject: __label forKey: @"label"];
  }
}

- (void) dealloc
{
  [__value release];
  [__label release];
  [super dealloc];
}

- (int64_t) id {
  return __id;
}

- (void) setId: (int64_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (int) type {
  return __type;
}

- (void) setType: (int) type {
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  __type_isset = NO;
}

- (NSString *) value {
  return [[__value retain] autorelease];
}

- (void) setValue: (NSString *) value {
  [value retain];
  [__value release];
  __value = value;
  __value_isset = YES;
}

- (BOOL) valueIsSet {
  return __value_isset;
}

- (void) unsetValue {
  [__value release];
  __value = nil;
  __value_isset = NO;
}

- (NSString *) label {
  return [[__label retain] autorelease];
}

- (void) setLabel: (NSString *) label {
  [label retain];
  [__label release];
  __label = label;
  __label_isset = YES;
}

- (BOOL) labelIsSet {
  return __label_isset;
}

- (void) unsetLabel {
  [__label release];
  __label = nil;
  __label_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setValue: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLabel: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"UserContactMail"];
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __id];
    [outProtocol writeFieldEnd];
  }
  if (__type_isset) {
    [outProtocol writeFieldBeginWithName: @"type" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __type];
    [outProtocol writeFieldEnd];
  }
  if (__value_isset) {
    if (__value != nil) {
      [outProtocol writeFieldBeginWithName: @"value" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __value];
      [outProtocol writeFieldEnd];
    }
  }
  if (__label_isset) {
    if (__label != nil) {
      [outProtocol writeFieldBeginWithName: @"label" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __label];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"UserContactMail("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%qi", __id];
  [ms appendString: @",type:"];
  [ms appendFormat: @"%i", __type];
  [ms appendString: @",value:"];
  [ms appendFormat: @"\"%@\"", __value];
  [ms appendString: @",label:"];
  [ms appendFormat: @"\"%@\"", __label];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation UserContact

- (id) initWithLinkList: (NSArray *) linkList phoneList: (NSArray *) phoneList mailList: (NSArray *) mailList
{
  self = [super init];
  __linkList = [linkList retain];
  __linkList_isset = YES;
  __phoneList = [phoneList retain];
  __phoneList_isset = YES;
  __mailList = [mailList retain];
  __mailList_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"linkList"])
  {
    __linkList = [[decoder decodeObjectForKey: @"linkList"] retain];
    __linkList_isset = YES;
  }
  if ([decoder containsValueForKey: @"phoneList"])
  {
    __phoneList = [[decoder decodeObjectForKey: @"phoneList"] retain];
    __phoneList_isset = YES;
  }
  if ([decoder containsValueForKey: @"mailList"])
  {
    __mailList = [[decoder decodeObjectForKey: @"mailList"] retain];
    __mailList_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__linkList_isset)
  {
    [encoder encodeObject: __linkList forKey: @"linkList"];
  }
  if (__phoneList_isset)
  {
    [encoder encodeObject: __phoneList forKey: @"phoneList"];
  }
  if (__mailList_isset)
  {
    [encoder encodeObject: __mailList forKey: @"mailList"];
  }
}

- (void) dealloc
{
  [__linkList release];
  [__phoneList release];
  [__mailList release];
  [super dealloc];
}

- (NSArray *) linkList {
  return [[__linkList retain] autorelease];
}

- (void) setLinkList: (NSArray *) linkList {
  [linkList retain];
  [__linkList release];
  __linkList = linkList;
  __linkList_isset = YES;
}

- (BOOL) linkListIsSet {
  return __linkList_isset;
}

- (void) unsetLinkList {
  [__linkList release];
  __linkList = nil;
  __linkList_isset = NO;
}

- (NSArray *) phoneList {
  return [[__phoneList retain] autorelease];
}

- (void) setPhoneList: (NSArray *) phoneList {
  [phoneList retain];
  [__phoneList release];
  __phoneList = phoneList;
  __phoneList_isset = YES;
}

- (BOOL) phoneListIsSet {
  return __phoneList_isset;
}

- (void) unsetPhoneList {
  [__phoneList release];
  __phoneList = nil;
  __phoneList_isset = NO;
}

- (NSArray *) mailList {
  return [[__mailList retain] autorelease];
}

- (void) setMailList: (NSArray *) mailList {
  [mailList retain];
  [__mailList release];
  __mailList = mailList;
  __mailList_isset = YES;
}

- (BOOL) mailListIsSet {
  return __mailList_isset;
}

- (void) unsetMailList {
  [__mailList release];
  __mailList = nil;
  __mailList_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            UserContactLink *_elem2 = [[UserContactLink alloc] init];
            [_elem2 read: inProtocol];
            [fieldValue addObject: _elem2];
            [_elem2 release];
          }
          [inProtocol readListEnd];
          [self setLinkList: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size3;
          [inProtocol readListBeginReturningElementType: NULL size: &_size3];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size3];
          int _i4;
          for (_i4 = 0; _i4 < _size3; ++_i4)
          {
            UserContactPhone *_elem5 = [[UserContactPhone alloc] init];
            [_elem5 read: inProtocol];
            [fieldValue addObject: _elem5];
            [_elem5 release];
          }
          [inProtocol readListEnd];
          [self setPhoneList: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size6;
          [inProtocol readListBeginReturningElementType: NULL size: &_size6];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size6];
          int _i7;
          for (_i7 = 0; _i7 < _size6; ++_i7)
          {
            UserContactMail *_elem8 = [[UserContactMail alloc] init];
            [_elem8 read: inProtocol];
            [fieldValue addObject: _elem8];
            [_elem8 release];
          }
          [inProtocol readListEnd];
          [self setMailList: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"UserContact"];
  if (__linkList_isset) {
    if (__linkList != nil) {
      [outProtocol writeFieldBeginWithName: @"linkList" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__linkList count]];
        int i10;
        for (i10 = 0; i10 < [__linkList count]; i10++)
        {
          [[__linkList objectAtIndex: i10] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__phoneList_isset) {
    if (__phoneList != nil) {
      [outProtocol writeFieldBeginWithName: @"phoneList" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__phoneList count]];
        int i12;
        for (i12 = 0; i12 < [__phoneList count]; i12++)
        {
          [[__phoneList objectAtIndex: i12] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__mailList_isset) {
    if (__mailList != nil) {
      [outProtocol writeFieldBeginWithName: @"mailList" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__mailList count]];
        int i14;
        for (i14 = 0; i14 < [__mailList count]; i14++)
        {
          [[__mailList objectAtIndex: i14] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"UserContact("];
  [ms appendString: @"linkList:"];
  [ms appendFormat: @"%@", __linkList];
  [ms appendString: @",phoneList:"];
  [ms appendFormat: @"%@", __phoneList];
  [ms appendString: @",mailList:"];
  [ms appendFormat: @"%@", __mailList];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation UserResumeStudy

- (id) initWithStarttime: (timestamp) starttime endtime: (timestamp) endtime school: (NSString *) school major: (NSString *) major type: (int) type comment: (NSString *) comment
{
  self = [super init];
  __starttime = starttime;
  __starttime_isset = YES;
  __endtime = endtime;
  __endtime_isset = YES;
  __school = [school retain];
  __school_isset = YES;
  __major = [major retain];
  __major_isset = YES;
  __type = type;
  __type_isset = YES;
  __comment = [comment retain];
  __comment_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"starttime"])
  {
    __starttime = [decoder decodeInt64ForKey: @"starttime"];
    __starttime_isset = YES;
  }
  if ([decoder containsValueForKey: @"endtime"])
  {
    __endtime = [decoder decodeInt64ForKey: @"endtime"];
    __endtime_isset = YES;
  }
  if ([decoder containsValueForKey: @"school"])
  {
    __school = [[decoder decodeObjectForKey: @"school"] retain];
    __school_isset = YES;
  }
  if ([decoder containsValueForKey: @"major"])
  {
    __major = [[decoder decodeObjectForKey: @"major"] retain];
    __major_isset = YES;
  }
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [decoder decodeIntForKey: @"type"];
    __type_isset = YES;
  }
  if ([decoder containsValueForKey: @"comment"])
  {
    __comment = [[decoder decodeObjectForKey: @"comment"] retain];
    __comment_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__starttime_isset)
  {
    [encoder encodeInt64: __starttime forKey: @"starttime"];
  }
  if (__endtime_isset)
  {
    [encoder encodeInt64: __endtime forKey: @"endtime"];
  }
  if (__school_isset)
  {
    [encoder encodeObject: __school forKey: @"school"];
  }
  if (__major_isset)
  {
    [encoder encodeObject: __major forKey: @"major"];
  }
  if (__type_isset)
  {
    [encoder encodeInt: __type forKey: @"type"];
  }
  if (__comment_isset)
  {
    [encoder encodeObject: __comment forKey: @"comment"];
  }
}

- (void) dealloc
{
  [__school release];
  [__major release];
  [__comment release];
  [super dealloc];
}

- (int64_t) starttime {
  return __starttime;
}

- (void) setStarttime: (int64_t) starttime {
  __starttime = starttime;
  __starttime_isset = YES;
}

- (BOOL) starttimeIsSet {
  return __starttime_isset;
}

- (void) unsetStarttime {
  __starttime_isset = NO;
}

- (int64_t) endtime {
  return __endtime;
}

- (void) setEndtime: (int64_t) endtime {
  __endtime = endtime;
  __endtime_isset = YES;
}

- (BOOL) endtimeIsSet {
  return __endtime_isset;
}

- (void) unsetEndtime {
  __endtime_isset = NO;
}

- (NSString *) school {
  return [[__school retain] autorelease];
}

- (void) setSchool: (NSString *) school {
  [school retain];
  [__school release];
  __school = school;
  __school_isset = YES;
}

- (BOOL) schoolIsSet {
  return __school_isset;
}

- (void) unsetSchool {
  [__school release];
  __school = nil;
  __school_isset = NO;
}

- (NSString *) major {
  return [[__major retain] autorelease];
}

- (void) setMajor: (NSString *) major {
  [major retain];
  [__major release];
  __major = major;
  __major_isset = YES;
}

- (BOOL) majorIsSet {
  return __major_isset;
}

- (void) unsetMajor {
  [__major release];
  __major = nil;
  __major_isset = NO;
}

- (int) type {
  return __type;
}

- (void) setType: (int) type {
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  __type_isset = NO;
}

- (NSString *) comment {
  return [[__comment retain] autorelease];
}

- (void) setComment: (NSString *) comment {
  [comment retain];
  [__comment release];
  __comment = comment;
  __comment_isset = YES;
}

- (BOOL) commentIsSet {
  return __comment_isset;
}

- (void) unsetComment {
  [__comment release];
  __comment = nil;
  __comment_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setStarttime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setEndtime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSchool: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMajor: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setComment: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"UserResumeStudy"];
  if (__starttime_isset) {
    [outProtocol writeFieldBeginWithName: @"starttime" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __starttime];
    [outProtocol writeFieldEnd];
  }
  if (__endtime_isset) {
    [outProtocol writeFieldBeginWithName: @"endtime" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __endtime];
    [outProtocol writeFieldEnd];
  }
  if (__school_isset) {
    if (__school != nil) {
      [outProtocol writeFieldBeginWithName: @"school" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __school];
      [outProtocol writeFieldEnd];
    }
  }
  if (__major_isset) {
    if (__major != nil) {
      [outProtocol writeFieldBeginWithName: @"major" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __major];
      [outProtocol writeFieldEnd];
    }
  }
  if (__type_isset) {
    [outProtocol writeFieldBeginWithName: @"type" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __type];
    [outProtocol writeFieldEnd];
  }
  if (__comment_isset) {
    if (__comment != nil) {
      [outProtocol writeFieldBeginWithName: @"comment" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __comment];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"UserResumeStudy("];
  [ms appendString: @"starttime:"];
  [ms appendFormat: @"%qi", __starttime];
  [ms appendString: @",endtime:"];
  [ms appendFormat: @"%qi", __endtime];
  [ms appendString: @",school:"];
  [ms appendFormat: @"\"%@\"", __school];
  [ms appendString: @",major:"];
  [ms appendFormat: @"\"%@\"", __major];
  [ms appendString: @",type:"];
  [ms appendFormat: @"%i", __type];
  [ms appendString: @",comment:"];
  [ms appendFormat: @"\"%@\"", __comment];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation UserResumeWork

- (id) initWithStarttime: (timestamp) starttime endtime: (timestamp) endtime org: (NSString *) org job: (NSString *) job comment: (NSString *) comment
{
  self = [super init];
  __starttime = starttime;
  __starttime_isset = YES;
  __endtime = endtime;
  __endtime_isset = YES;
  __org = [org retain];
  __org_isset = YES;
  __job = [job retain];
  __job_isset = YES;
  __comment = [comment retain];
  __comment_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"starttime"])
  {
    __starttime = [decoder decodeInt64ForKey: @"starttime"];
    __starttime_isset = YES;
  }
  if ([decoder containsValueForKey: @"endtime"])
  {
    __endtime = [decoder decodeInt64ForKey: @"endtime"];
    __endtime_isset = YES;
  }
  if ([decoder containsValueForKey: @"org"])
  {
    __org = [[decoder decodeObjectForKey: @"org"] retain];
    __org_isset = YES;
  }
  if ([decoder containsValueForKey: @"job"])
  {
    __job = [[decoder decodeObjectForKey: @"job"] retain];
    __job_isset = YES;
  }
  if ([decoder containsValueForKey: @"comment"])
  {
    __comment = [[decoder decodeObjectForKey: @"comment"] retain];
    __comment_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__starttime_isset)
  {
    [encoder encodeInt64: __starttime forKey: @"starttime"];
  }
  if (__endtime_isset)
  {
    [encoder encodeInt64: __endtime forKey: @"endtime"];
  }
  if (__org_isset)
  {
    [encoder encodeObject: __org forKey: @"org"];
  }
  if (__job_isset)
  {
    [encoder encodeObject: __job forKey: @"job"];
  }
  if (__comment_isset)
  {
    [encoder encodeObject: __comment forKey: @"comment"];
  }
}

- (void) dealloc
{
  [__org release];
  [__job release];
  [__comment release];
  [super dealloc];
}

- (int64_t) starttime {
  return __starttime;
}

- (void) setStarttime: (int64_t) starttime {
  __starttime = starttime;
  __starttime_isset = YES;
}

- (BOOL) starttimeIsSet {
  return __starttime_isset;
}

- (void) unsetStarttime {
  __starttime_isset = NO;
}

- (int64_t) endtime {
  return __endtime;
}

- (void) setEndtime: (int64_t) endtime {
  __endtime = endtime;
  __endtime_isset = YES;
}

- (BOOL) endtimeIsSet {
  return __endtime_isset;
}

- (void) unsetEndtime {
  __endtime_isset = NO;
}

- (NSString *) org {
  return [[__org retain] autorelease];
}

- (void) setOrg: (NSString *) org {
  [org retain];
  [__org release];
  __org = org;
  __org_isset = YES;
}

- (BOOL) orgIsSet {
  return __org_isset;
}

- (void) unsetOrg {
  [__org release];
  __org = nil;
  __org_isset = NO;
}

- (NSString *) job {
  return [[__job retain] autorelease];
}

- (void) setJob: (NSString *) job {
  [job retain];
  [__job release];
  __job = job;
  __job_isset = YES;
}

- (BOOL) jobIsSet {
  return __job_isset;
}

- (void) unsetJob {
  [__job release];
  __job = nil;
  __job_isset = NO;
}

- (NSString *) comment {
  return [[__comment retain] autorelease];
}

- (void) setComment: (NSString *) comment {
  [comment retain];
  [__comment release];
  __comment = comment;
  __comment_isset = YES;
}

- (BOOL) commentIsSet {
  return __comment_isset;
}

- (void) unsetComment {
  [__comment release];
  __comment = nil;
  __comment_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setStarttime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setEndtime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOrg: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setJob: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setComment: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"UserResumeWork"];
  if (__starttime_isset) {
    [outProtocol writeFieldBeginWithName: @"starttime" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __starttime];
    [outProtocol writeFieldEnd];
  }
  if (__endtime_isset) {
    [outProtocol writeFieldBeginWithName: @"endtime" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __endtime];
    [outProtocol writeFieldEnd];
  }
  if (__org_isset) {
    if (__org != nil) {
      [outProtocol writeFieldBeginWithName: @"org" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __org];
      [outProtocol writeFieldEnd];
    }
  }
  if (__job_isset) {
    if (__job != nil) {
      [outProtocol writeFieldBeginWithName: @"job" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __job];
      [outProtocol writeFieldEnd];
    }
  }
  if (__comment_isset) {
    if (__comment != nil) {
      [outProtocol writeFieldBeginWithName: @"comment" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __comment];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"UserResumeWork("];
  [ms appendString: @"starttime:"];
  [ms appendFormat: @"%qi", __starttime];
  [ms appendString: @",endtime:"];
  [ms appendFormat: @"%qi", __endtime];
  [ms appendString: @",org:"];
  [ms appendFormat: @"\"%@\"", __org];
  [ms appendString: @",job:"];
  [ms appendFormat: @"\"%@\"", __job];
  [ms appendString: @",comment:"];
  [ms appendFormat: @"\"%@\"", __comment];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation UserResume

- (id) initWithStudyList: (NSArray *) studyList workList: (NSArray *) workList
{
  self = [super init];
  __studyList = [studyList retain];
  __studyList_isset = YES;
  __workList = [workList retain];
  __workList_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"studyList"])
  {
    __studyList = [[decoder decodeObjectForKey: @"studyList"] retain];
    __studyList_isset = YES;
  }
  if ([decoder containsValueForKey: @"workList"])
  {
    __workList = [[decoder decodeObjectForKey: @"workList"] retain];
    __workList_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__studyList_isset)
  {
    [encoder encodeObject: __studyList forKey: @"studyList"];
  }
  if (__workList_isset)
  {
    [encoder encodeObject: __workList forKey: @"workList"];
  }
}

- (void) dealloc
{
  [__studyList release];
  [__workList release];
  [super dealloc];
}

- (NSArray *) studyList {
  return [[__studyList retain] autorelease];
}

- (void) setStudyList: (NSArray *) studyList {
  [studyList retain];
  [__studyList release];
  __studyList = studyList;
  __studyList_isset = YES;
}

- (BOOL) studyListIsSet {
  return __studyList_isset;
}

- (void) unsetStudyList {
  [__studyList release];
  __studyList = nil;
  __studyList_isset = NO;
}

- (NSArray *) workList {
  return [[__workList retain] autorelease];
}

- (void) setWorkList: (NSArray *) workList {
  [workList retain];
  [__workList release];
  __workList = workList;
  __workList_isset = YES;
}

- (BOOL) workListIsSet {
  return __workList_isset;
}

- (void) unsetWorkList {
  [__workList release];
  __workList = nil;
  __workList_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size15;
          [inProtocol readListBeginReturningElementType: NULL size: &_size15];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size15];
          int _i16;
          for (_i16 = 0; _i16 < _size15; ++_i16)
          {
            UserResumeStudy *_elem17 = [[UserResumeStudy alloc] init];
            [_elem17 read: inProtocol];
            [fieldValue addObject: _elem17];
            [_elem17 release];
          }
          [inProtocol readListEnd];
          [self setStudyList: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size18;
          [inProtocol readListBeginReturningElementType: NULL size: &_size18];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size18];
          int _i19;
          for (_i19 = 0; _i19 < _size18; ++_i19)
          {
            UserResumeWork *_elem20 = [[UserResumeWork alloc] init];
            [_elem20 read: inProtocol];
            [fieldValue addObject: _elem20];
            [_elem20 release];
          }
          [inProtocol readListEnd];
          [self setWorkList: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"UserResume"];
  if (__studyList_isset) {
    if (__studyList != nil) {
      [outProtocol writeFieldBeginWithName: @"studyList" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__studyList count]];
        int i22;
        for (i22 = 0; i22 < [__studyList count]; i22++)
        {
          [[__studyList objectAtIndex: i22] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__workList_isset) {
    if (__workList != nil) {
      [outProtocol writeFieldBeginWithName: @"workList" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__workList count]];
        int i24;
        for (i24 = 0; i24 < [__workList count]; i24++)
        {
          [[__workList objectAtIndex: i24] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"UserResume("];
  [ms appendString: @"studyList:"];
  [ms appendFormat: @"%@", __studyList];
  [ms appendString: @",workList:"];
  [ms appendFormat: @"%@", __workList];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation User

- (id) initWithInfo: (UserInfo *) info contact: (UserContact *) contact resume: (UserResume *) resume relationship: (int) relationship
{
  self = [super init];
  __info = [info retain];
  __info_isset = YES;
  __contact = [contact retain];
  __contact_isset = YES;
  __resume = [resume retain];
  __resume_isset = YES;
  __relationship = relationship;
  __relationship_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"info"])
  {
    __info = [[decoder decodeObjectForKey: @"info"] retain];
    __info_isset = YES;
  }
  if ([decoder containsValueForKey: @"contact"])
  {
    __contact = [[decoder decodeObjectForKey: @"contact"] retain];
    __contact_isset = YES;
  }
  if ([decoder containsValueForKey: @"resume"])
  {
    __resume = [[decoder decodeObjectForKey: @"resume"] retain];
    __resume_isset = YES;
  }
  if ([decoder containsValueForKey: @"relationship"])
  {
    __relationship = [decoder decodeIntForKey: @"relationship"];
    __relationship_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__info_isset)
  {
    [encoder encodeObject: __info forKey: @"info"];
  }
  if (__contact_isset)
  {
    [encoder encodeObject: __contact forKey: @"contact"];
  }
  if (__resume_isset)
  {
    [encoder encodeObject: __resume forKey: @"resume"];
  }
  if (__relationship_isset)
  {
    [encoder encodeInt: __relationship forKey: @"relationship"];
  }
}

- (void) dealloc
{
  [__info release];
  [__contact release];
  [__resume release];
  [super dealloc];
}

- (UserInfo *) info {
  return [[__info retain] autorelease];
}

- (void) setInfo: (UserInfo *) info {
  [info retain];
  [__info release];
  __info = info;
  __info_isset = YES;
}

- (BOOL) infoIsSet {
  return __info_isset;
}

- (void) unsetInfo {
  [__info release];
  __info = nil;
  __info_isset = NO;
}

- (UserContact *) contact {
  return [[__contact retain] autorelease];
}

- (void) setContact: (UserContact *) contact {
  [contact retain];
  [__contact release];
  __contact = contact;
  __contact_isset = YES;
}

- (BOOL) contactIsSet {
  return __contact_isset;
}

- (void) unsetContact {
  [__contact release];
  __contact = nil;
  __contact_isset = NO;
}

- (UserResume *) resume {
  return [[__resume retain] autorelease];
}

- (void) setResume: (UserResume *) resume {
  [resume retain];
  [__resume release];
  __resume = resume;
  __resume_isset = YES;
}

- (BOOL) resumeIsSet {
  return __resume_isset;
}

- (void) unsetResume {
  [__resume release];
  __resume = nil;
  __resume_isset = NO;
}

- (int) relationship {
  return __relationship;
}

- (void) setRelationship: (int) relationship {
  __relationship = relationship;
  __relationship_isset = YES;
}

- (BOOL) relationshipIsSet {
  return __relationship_isset;
}

- (void) unsetRelationship {
  __relationship_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          UserInfo *fieldValue = [[UserInfo alloc] init];
          [fieldValue read: inProtocol];
          [self setInfo: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          UserContact *fieldValue = [[UserContact alloc] init];
          [fieldValue read: inProtocol];
          [self setContact: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          UserResume *fieldValue = [[UserResume alloc] init];
          [fieldValue read: inProtocol];
          [self setResume: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setRelationship: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"User"];
  if (__info_isset) {
    if (__info != nil) {
      [outProtocol writeFieldBeginWithName: @"info" type: TType_STRUCT fieldID: 1];
      [__info write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__contact_isset) {
    if (__contact != nil) {
      [outProtocol writeFieldBeginWithName: @"contact" type: TType_STRUCT fieldID: 2];
      [__contact write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__resume_isset) {
    if (__resume != nil) {
      [outProtocol writeFieldBeginWithName: @"resume" type: TType_STRUCT fieldID: 3];
      [__resume write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__relationship_isset) {
    [outProtocol writeFieldBeginWithName: @"relationship" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __relationship];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"User("];
  [ms appendString: @"info:"];
  [ms appendFormat: @"%@", __info];
  [ms appendString: @",contact:"];
  [ms appendFormat: @"%@", __contact];
  [ms appendString: @",resume:"];
  [ms appendFormat: @"%@", __resume];
  [ms appendString: @",relationship:"];
  [ms appendFormat: @"%i", __relationship];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation StatusPost

- (id) initWithContent: (NSString *) content tagList: (NSArray *) tagList
{
  self = [super init];
  __content = [content retain];
  __content_isset = YES;
  __tagList = [tagList retain];
  __tagList_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"content"])
  {
    __content = [[decoder decodeObjectForKey: @"content"] retain];
    __content_isset = YES;
  }
  if ([decoder containsValueForKey: @"tagList"])
  {
    __tagList = [[decoder decodeObjectForKey: @"tagList"] retain];
    __tagList_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__content_isset)
  {
    [encoder encodeObject: __content forKey: @"content"];
  }
  if (__tagList_isset)
  {
    [encoder encodeObject: __tagList forKey: @"tagList"];
  }
}

- (void) dealloc
{
  [__content release];
  [__tagList release];
  [super dealloc];
}

- (NSString *) content {
  return [[__content retain] autorelease];
}

- (void) setContent: (NSString *) content {
  [content retain];
  [__content release];
  __content = content;
  __content_isset = YES;
}

- (BOOL) contentIsSet {
  return __content_isset;
}

- (void) unsetContent {
  [__content release];
  __content = nil;
  __content_isset = NO;
}

- (NSArray *) tagList {
  return [[__tagList retain] autorelease];
}

- (void) setTagList: (NSArray *) tagList {
  [tagList retain];
  [__tagList release];
  __tagList = tagList;
  __tagList_isset = YES;
}

- (BOOL) tagListIsSet {
  return __tagList_isset;
}

- (void) unsetTagList {
  [__tagList release];
  __tagList = nil;
  __tagList_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setContent: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size25;
          [inProtocol readListBeginReturningElementType: NULL size: &_size25];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size25];
          int _i26;
          for (_i26 = 0; _i26 < _size25; ++_i26)
          {
            NSString * _elem27 = [inProtocol readString];
            [fieldValue addObject: _elem27];
          }
          [inProtocol readListEnd];
          [self setTagList: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"StatusPost"];
  if (__content_isset) {
    if (__content != nil) {
      [outProtocol writeFieldBeginWithName: @"content" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __content];
      [outProtocol writeFieldEnd];
    }
  }
  if (__tagList_isset) {
    if (__tagList != nil) {
      [outProtocol writeFieldBeginWithName: @"tagList" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__tagList count]];
        int i29;
        for (i29 = 0; i29 < [__tagList count]; i29++)
        {
          [outProtocol writeString: [__tagList objectAtIndex: i29]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"StatusPost("];
  [ms appendString: @"content:"];
  [ms appendFormat: @"\"%@\"", __content];
  [ms appendString: @",tagList:"];
  [ms appendFormat: @"%@", __tagList];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation StatusComment

- (id) initWithId: (int64_t) id authorID: (int64_t) authorID authorName: (NSString *) authorName date: (timestamp) date content: (NSString *) content
{
  self = [super init];
  __id = id;
  __id_isset = YES;
  __authorID = authorID;
  __authorID_isset = YES;
  __authorName = [authorName retain];
  __authorName_isset = YES;
  __date = date;
  __date_isset = YES;
  __content = [content retain];
  __content_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt64ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"authorID"])
  {
    __authorID = [decoder decodeInt64ForKey: @"authorID"];
    __authorID_isset = YES;
  }
  if ([decoder containsValueForKey: @"authorName"])
  {
    __authorName = [[decoder decodeObjectForKey: @"authorName"] retain];
    __authorName_isset = YES;
  }
  if ([decoder containsValueForKey: @"date"])
  {
    __date = [decoder decodeInt64ForKey: @"date"];
    __date_isset = YES;
  }
  if ([decoder containsValueForKey: @"content"])
  {
    __content = [[decoder decodeObjectForKey: @"content"] retain];
    __content_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeInt64: __id forKey: @"id"];
  }
  if (__authorID_isset)
  {
    [encoder encodeInt64: __authorID forKey: @"authorID"];
  }
  if (__authorName_isset)
  {
    [encoder encodeObject: __authorName forKey: @"authorName"];
  }
  if (__date_isset)
  {
    [encoder encodeInt64: __date forKey: @"date"];
  }
  if (__content_isset)
  {
    [encoder encodeObject: __content forKey: @"content"];
  }
}

- (void) dealloc
{
  [__authorName release];
  [__content release];
  [super dealloc];
}

- (int64_t) id {
  return __id;
}

- (void) setId: (int64_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (int64_t) authorID {
  return __authorID;
}

- (void) setAuthorID: (int64_t) authorID {
  __authorID = authorID;
  __authorID_isset = YES;
}

- (BOOL) authorIDIsSet {
  return __authorID_isset;
}

- (void) unsetAuthorID {
  __authorID_isset = NO;
}

- (NSString *) authorName {
  return [[__authorName retain] autorelease];
}

- (void) setAuthorName: (NSString *) authorName {
  [authorName retain];
  [__authorName release];
  __authorName = authorName;
  __authorName_isset = YES;
}

- (BOOL) authorNameIsSet {
  return __authorName_isset;
}

- (void) unsetAuthorName {
  [__authorName release];
  __authorName = nil;
  __authorName_isset = NO;
}

- (int64_t) date {
  return __date;
}

- (void) setDate: (int64_t) date {
  __date = date;
  __date_isset = YES;
}

- (BOOL) dateIsSet {
  return __date_isset;
}

- (void) unsetDate {
  __date_isset = NO;
}

- (NSString *) content {
  return [[__content retain] autorelease];
}

- (void) setContent: (NSString *) content {
  [content retain];
  [__content release];
  __content = content;
  __content_isset = YES;
}

- (BOOL) contentIsSet {
  return __content_isset;
}

- (void) unsetContent {
  [__content release];
  __content = nil;
  __content_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setAuthorID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAuthorName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setContent: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"StatusComment"];
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __id];
    [outProtocol writeFieldEnd];
  }
  if (__authorID_isset) {
    [outProtocol writeFieldBeginWithName: @"authorID" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __authorID];
    [outProtocol writeFieldEnd];
  }
  if (__authorName_isset) {
    if (__authorName != nil) {
      [outProtocol writeFieldBeginWithName: @"authorName" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __authorName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__date_isset) {
    [outProtocol writeFieldBeginWithName: @"date" type: TType_I64 fieldID: 4];
    [outProtocol writeI64: __date];
    [outProtocol writeFieldEnd];
  }
  if (__content_isset) {
    if (__content != nil) {
      [outProtocol writeFieldBeginWithName: @"content" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __content];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"StatusComment("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%qi", __id];
  [ms appendString: @",authorID:"];
  [ms appendFormat: @"%qi", __authorID];
  [ms appendString: @",authorName:"];
  [ms appendFormat: @"\"%@\"", __authorName];
  [ms appendString: @",date:"];
  [ms appendFormat: @"%qi", __date];
  [ms appendString: @",content:"];
  [ms appendFormat: @"\"%@\"", __content];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Status

- (id) initWithId: (int64_t) id authorID: (int64_t) authorID authorName: (NSString *) authorName date: (timestamp) date content: (NSString *) content commentCount: (int64_t) commentCount commentList: (NSArray *) commentList
{
  self = [super init];
  __id = id;
  __id_isset = YES;
  __authorID = authorID;
  __authorID_isset = YES;
  __authorName = [authorName retain];
  __authorName_isset = YES;
  __date = date;
  __date_isset = YES;
  __content = [content retain];
  __content_isset = YES;
  __commentCount = commentCount;
  __commentCount_isset = YES;
  __commentList = [commentList retain];
  __commentList_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt64ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"authorID"])
  {
    __authorID = [decoder decodeInt64ForKey: @"authorID"];
    __authorID_isset = YES;
  }
  if ([decoder containsValueForKey: @"authorName"])
  {
    __authorName = [[decoder decodeObjectForKey: @"authorName"] retain];
    __authorName_isset = YES;
  }
  if ([decoder containsValueForKey: @"date"])
  {
    __date = [decoder decodeInt64ForKey: @"date"];
    __date_isset = YES;
  }
  if ([decoder containsValueForKey: @"content"])
  {
    __content = [[decoder decodeObjectForKey: @"content"] retain];
    __content_isset = YES;
  }
  if ([decoder containsValueForKey: @"commentCount"])
  {
    __commentCount = [decoder decodeInt64ForKey: @"commentCount"];
    __commentCount_isset = YES;
  }
  if ([decoder containsValueForKey: @"commentList"])
  {
    __commentList = [[decoder decodeObjectForKey: @"commentList"] retain];
    __commentList_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeInt64: __id forKey: @"id"];
  }
  if (__authorID_isset)
  {
    [encoder encodeInt64: __authorID forKey: @"authorID"];
  }
  if (__authorName_isset)
  {
    [encoder encodeObject: __authorName forKey: @"authorName"];
  }
  if (__date_isset)
  {
    [encoder encodeInt64: __date forKey: @"date"];
  }
  if (__content_isset)
  {
    [encoder encodeObject: __content forKey: @"content"];
  }
  if (__commentCount_isset)
  {
    [encoder encodeInt64: __commentCount forKey: @"commentCount"];
  }
  if (__commentList_isset)
  {
    [encoder encodeObject: __commentList forKey: @"commentList"];
  }
}

- (void) dealloc
{
  [__authorName release];
  [__content release];
  [__commentList release];
  [super dealloc];
}

- (int64_t) id {
  return __id;
}

- (void) setId: (int64_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (int64_t) authorID {
  return __authorID;
}

- (void) setAuthorID: (int64_t) authorID {
  __authorID = authorID;
  __authorID_isset = YES;
}

- (BOOL) authorIDIsSet {
  return __authorID_isset;
}

- (void) unsetAuthorID {
  __authorID_isset = NO;
}

- (NSString *) authorName {
  return [[__authorName retain] autorelease];
}

- (void) setAuthorName: (NSString *) authorName {
  [authorName retain];
  [__authorName release];
  __authorName = authorName;
  __authorName_isset = YES;
}

- (BOOL) authorNameIsSet {
  return __authorName_isset;
}

- (void) unsetAuthorName {
  [__authorName release];
  __authorName = nil;
  __authorName_isset = NO;
}

- (int64_t) date {
  return __date;
}

- (void) setDate: (int64_t) date {
  __date = date;
  __date_isset = YES;
}

- (BOOL) dateIsSet {
  return __date_isset;
}

- (void) unsetDate {
  __date_isset = NO;
}

- (NSString *) content {
  return [[__content retain] autorelease];
}

- (void) setContent: (NSString *) content {
  [content retain];
  [__content release];
  __content = content;
  __content_isset = YES;
}

- (BOOL) contentIsSet {
  return __content_isset;
}

- (void) unsetContent {
  [__content release];
  __content = nil;
  __content_isset = NO;
}

- (int64_t) commentCount {
  return __commentCount;
}

- (void) setCommentCount: (int64_t) commentCount {
  __commentCount = commentCount;
  __commentCount_isset = YES;
}

- (BOOL) commentCountIsSet {
  return __commentCount_isset;
}

- (void) unsetCommentCount {
  __commentCount_isset = NO;
}

- (NSArray *) commentList {
  return [[__commentList retain] autorelease];
}

- (void) setCommentList: (NSArray *) commentList {
  [commentList retain];
  [__commentList release];
  __commentList = commentList;
  __commentList_isset = YES;
}

- (BOOL) commentListIsSet {
  return __commentList_isset;
}

- (void) unsetCommentList {
  [__commentList release];
  __commentList = nil;
  __commentList_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setAuthorID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAuthorName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setContent: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setCommentCount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_LIST) {
          int _size30;
          [inProtocol readListBeginReturningElementType: NULL size: &_size30];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size30];
          int _i31;
          for (_i31 = 0; _i31 < _size30; ++_i31)
          {
            StatusComment *_elem32 = [[StatusComment alloc] init];
            [_elem32 read: inProtocol];
            [fieldValue addObject: _elem32];
            [_elem32 release];
          }
          [inProtocol readListEnd];
          [self setCommentList: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Status"];
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __id];
    [outProtocol writeFieldEnd];
  }
  if (__authorID_isset) {
    [outProtocol writeFieldBeginWithName: @"authorID" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __authorID];
    [outProtocol writeFieldEnd];
  }
  if (__authorName_isset) {
    if (__authorName != nil) {
      [outProtocol writeFieldBeginWithName: @"authorName" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __authorName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__date_isset) {
    [outProtocol writeFieldBeginWithName: @"date" type: TType_I64 fieldID: 4];
    [outProtocol writeI64: __date];
    [outProtocol writeFieldEnd];
  }
  if (__content_isset) {
    if (__content != nil) {
      [outProtocol writeFieldBeginWithName: @"content" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __content];
      [outProtocol writeFieldEnd];
    }
  }
  if (__commentCount_isset) {
    [outProtocol writeFieldBeginWithName: @"commentCount" type: TType_I64 fieldID: 6];
    [outProtocol writeI64: __commentCount];
    [outProtocol writeFieldEnd];
  }
  if (__commentList_isset) {
    if (__commentList != nil) {
      [outProtocol writeFieldBeginWithName: @"commentList" type: TType_LIST fieldID: 7];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__commentList count]];
        int i34;
        for (i34 = 0; i34 < [__commentList count]; i34++)
        {
          [[__commentList objectAtIndex: i34] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Status("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%qi", __id];
  [ms appendString: @",authorID:"];
  [ms appendFormat: @"%qi", __authorID];
  [ms appendString: @",authorName:"];
  [ms appendFormat: @"\"%@\"", __authorName];
  [ms appendString: @",date:"];
  [ms appendFormat: @"%qi", __date];
  [ms appendString: @",content:"];
  [ms appendFormat: @"\"%@\"", __content];
  [ms appendString: @",commentCount:"];
  [ms appendFormat: @"%qi", __commentCount];
  [ms appendString: @",commentList:"];
  [ms appendFormat: @"%@", __commentList];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Task

- (id) initWithId: (int64_t) id name: (NSString *) name intro: (NSString *) intro cid: (int) cid begin_time: (timestamp) begin_time end_time: (timestamp) end_time owner: (UserInfo *) owner user_apply_list: (NSArray *) user_apply_list user_accept_list: (NSArray *) user_accept_list user_reject_list: (NSArray *) user_reject_list
{
  self = [super init];
  __id = id;
  __id_isset = YES;
  __name = [name retain];
  __name_isset = YES;
  __intro = [intro retain];
  __intro_isset = YES;
  __cid = cid;
  __cid_isset = YES;
  __begin_time = begin_time;
  __begin_time_isset = YES;
  __end_time = end_time;
  __end_time_isset = YES;
  __owner = [owner retain];
  __owner_isset = YES;
  __user_apply_list = [user_apply_list retain];
  __user_apply_list_isset = YES;
  __user_accept_list = [user_accept_list retain];
  __user_accept_list_isset = YES;
  __user_reject_list = [user_reject_list retain];
  __user_reject_list_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt64ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"intro"])
  {
    __intro = [[decoder decodeObjectForKey: @"intro"] retain];
    __intro_isset = YES;
  }
  if ([decoder containsValueForKey: @"cid"])
  {
    __cid = [decoder decodeIntForKey: @"cid"];
    __cid_isset = YES;
  }
  if ([decoder containsValueForKey: @"begin_time"])
  {
    __begin_time = [decoder decodeInt64ForKey: @"begin_time"];
    __begin_time_isset = YES;
  }
  if ([decoder containsValueForKey: @"end_time"])
  {
    __end_time = [decoder decodeInt64ForKey: @"end_time"];
    __end_time_isset = YES;
  }
  if ([decoder containsValueForKey: @"owner"])
  {
    __owner = [[decoder decodeObjectForKey: @"owner"] retain];
    __owner_isset = YES;
  }
  if ([decoder containsValueForKey: @"user_apply_list"])
  {
    __user_apply_list = [[decoder decodeObjectForKey: @"user_apply_list"] retain];
    __user_apply_list_isset = YES;
  }
  if ([decoder containsValueForKey: @"user_accept_list"])
  {
    __user_accept_list = [[decoder decodeObjectForKey: @"user_accept_list"] retain];
    __user_accept_list_isset = YES;
  }
  if ([decoder containsValueForKey: @"user_reject_list"])
  {
    __user_reject_list = [[decoder decodeObjectForKey: @"user_reject_list"] retain];
    __user_reject_list_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeInt64: __id forKey: @"id"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__intro_isset)
  {
    [encoder encodeObject: __intro forKey: @"intro"];
  }
  if (__cid_isset)
  {
    [encoder encodeInt: __cid forKey: @"cid"];
  }
  if (__begin_time_isset)
  {
    [encoder encodeInt64: __begin_time forKey: @"begin_time"];
  }
  if (__end_time_isset)
  {
    [encoder encodeInt64: __end_time forKey: @"end_time"];
  }
  if (__owner_isset)
  {
    [encoder encodeObject: __owner forKey: @"owner"];
  }
  if (__user_apply_list_isset)
  {
    [encoder encodeObject: __user_apply_list forKey: @"user_apply_list"];
  }
  if (__user_accept_list_isset)
  {
    [encoder encodeObject: __user_accept_list forKey: @"user_accept_list"];
  }
  if (__user_reject_list_isset)
  {
    [encoder encodeObject: __user_reject_list forKey: @"user_reject_list"];
  }
}

- (void) dealloc
{
  [__name release];
  [__intro release];
  [__owner release];
  [__user_apply_list release];
  [__user_accept_list release];
  [__user_reject_list release];
  [super dealloc];
}

- (int64_t) id {
  return __id;
}

- (void) setId: (int64_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (NSString *) name {
  return [[__name retain] autorelease];
}

- (void) setName: (NSString *) name {
  [name retain];
  [__name release];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) intro {
  return [[__intro retain] autorelease];
}

- (void) setIntro: (NSString *) intro {
  [intro retain];
  [__intro release];
  __intro = intro;
  __intro_isset = YES;
}

- (BOOL) introIsSet {
  return __intro_isset;
}

- (void) unsetIntro {
  [__intro release];
  __intro = nil;
  __intro_isset = NO;
}

- (int) cid {
  return __cid;
}

- (void) setCid: (int) cid {
  __cid = cid;
  __cid_isset = YES;
}

- (BOOL) cidIsSet {
  return __cid_isset;
}

- (void) unsetCid {
  __cid_isset = NO;
}

- (int64_t) begin_time {
  return __begin_time;
}

- (void) setBegin_time: (int64_t) begin_time {
  __begin_time = begin_time;
  __begin_time_isset = YES;
}

- (BOOL) begin_timeIsSet {
  return __begin_time_isset;
}

- (void) unsetBegin_time {
  __begin_time_isset = NO;
}

- (int64_t) end_time {
  return __end_time;
}

- (void) setEnd_time: (int64_t) end_time {
  __end_time = end_time;
  __end_time_isset = YES;
}

- (BOOL) end_timeIsSet {
  return __end_time_isset;
}

- (void) unsetEnd_time {
  __end_time_isset = NO;
}

- (UserInfo *) owner {
  return [[__owner retain] autorelease];
}

- (void) setOwner: (UserInfo *) owner {
  [owner retain];
  [__owner release];
  __owner = owner;
  __owner_isset = YES;
}

- (BOOL) ownerIsSet {
  return __owner_isset;
}

- (void) unsetOwner {
  [__owner release];
  __owner = nil;
  __owner_isset = NO;
}

- (NSArray *) user_apply_list {
  return [[__user_apply_list retain] autorelease];
}

- (void) setUser_apply_list: (NSArray *) user_apply_list {
  [user_apply_list retain];
  [__user_apply_list release];
  __user_apply_list = user_apply_list;
  __user_apply_list_isset = YES;
}

- (BOOL) user_apply_listIsSet {
  return __user_apply_list_isset;
}

- (void) unsetUser_apply_list {
  [__user_apply_list release];
  __user_apply_list = nil;
  __user_apply_list_isset = NO;
}

- (NSArray *) user_accept_list {
  return [[__user_accept_list retain] autorelease];
}

- (void) setUser_accept_list: (NSArray *) user_accept_list {
  [user_accept_list retain];
  [__user_accept_list release];
  __user_accept_list = user_accept_list;
  __user_accept_list_isset = YES;
}

- (BOOL) user_accept_listIsSet {
  return __user_accept_list_isset;
}

- (void) unsetUser_accept_list {
  [__user_accept_list release];
  __user_accept_list = nil;
  __user_accept_list_isset = NO;
}

- (NSArray *) user_reject_list {
  return [[__user_reject_list retain] autorelease];
}

- (void) setUser_reject_list: (NSArray *) user_reject_list {
  [user_reject_list retain];
  [__user_reject_list release];
  __user_reject_list = user_reject_list;
  __user_reject_list_isset = YES;
}

- (BOOL) user_reject_listIsSet {
  return __user_reject_list_isset;
}

- (void) unsetUser_reject_list {
  [__user_reject_list release];
  __user_reject_list = nil;
  __user_reject_list_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIntro: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setCid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setBegin_time: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setEnd_time: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRUCT) {
          UserInfo *fieldValue = [[UserInfo alloc] init];
          [fieldValue read: inProtocol];
          [self setOwner: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_LIST) {
          int _size35;
          [inProtocol readListBeginReturningElementType: NULL size: &_size35];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size35];
          int _i36;
          for (_i36 = 0; _i36 < _size35; ++_i36)
          {
            UserInfo *_elem37 = [[UserInfo alloc] init];
            [_elem37 read: inProtocol];
            [fieldValue addObject: _elem37];
            [_elem37 release];
          }
          [inProtocol readListEnd];
          [self setUser_apply_list: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_LIST) {
          int _size38;
          [inProtocol readListBeginReturningElementType: NULL size: &_size38];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size38];
          int _i39;
          for (_i39 = 0; _i39 < _size38; ++_i39)
          {
            UserInfo *_elem40 = [[UserInfo alloc] init];
            [_elem40 read: inProtocol];
            [fieldValue addObject: _elem40];
            [_elem40 release];
          }
          [inProtocol readListEnd];
          [self setUser_accept_list: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_LIST) {
          int _size41;
          [inProtocol readListBeginReturningElementType: NULL size: &_size41];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size41];
          int _i42;
          for (_i42 = 0; _i42 < _size41; ++_i42)
          {
            UserInfo *_elem43 = [[UserInfo alloc] init];
            [_elem43 read: inProtocol];
            [fieldValue addObject: _elem43];
            [_elem43 release];
          }
          [inProtocol readListEnd];
          [self setUser_reject_list: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Task"];
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __id];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__intro_isset) {
    if (__intro != nil) {
      [outProtocol writeFieldBeginWithName: @"intro" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __intro];
      [outProtocol writeFieldEnd];
    }
  }
  if (__cid_isset) {
    [outProtocol writeFieldBeginWithName: @"cid" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __cid];
    [outProtocol writeFieldEnd];
  }
  if (__begin_time_isset) {
    [outProtocol writeFieldBeginWithName: @"begin_time" type: TType_I64 fieldID: 5];
    [outProtocol writeI64: __begin_time];
    [outProtocol writeFieldEnd];
  }
  if (__end_time_isset) {
    [outProtocol writeFieldBeginWithName: @"end_time" type: TType_I64 fieldID: 6];
    [outProtocol writeI64: __end_time];
    [outProtocol writeFieldEnd];
  }
  if (__owner_isset) {
    if (__owner != nil) {
      [outProtocol writeFieldBeginWithName: @"owner" type: TType_STRUCT fieldID: 7];
      [__owner write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__user_apply_list_isset) {
    if (__user_apply_list != nil) {
      [outProtocol writeFieldBeginWithName: @"user_apply_list" type: TType_LIST fieldID: 8];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__user_apply_list count]];
        int i45;
        for (i45 = 0; i45 < [__user_apply_list count]; i45++)
        {
          [[__user_apply_list objectAtIndex: i45] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__user_accept_list_isset) {
    if (__user_accept_list != nil) {
      [outProtocol writeFieldBeginWithName: @"user_accept_list" type: TType_LIST fieldID: 11];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__user_accept_list count]];
        int i47;
        for (i47 = 0; i47 < [__user_accept_list count]; i47++)
        {
          [[__user_accept_list objectAtIndex: i47] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__user_reject_list_isset) {
    if (__user_reject_list != nil) {
      [outProtocol writeFieldBeginWithName: @"user_reject_list" type: TType_LIST fieldID: 12];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__user_reject_list count]];
        int i49;
        for (i49 = 0; i49 < [__user_reject_list count]; i49++)
        {
          [[__user_reject_list objectAtIndex: i49] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Task("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%qi", __id];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",intro:"];
  [ms appendFormat: @"\"%@\"", __intro];
  [ms appendString: @",cid:"];
  [ms appendFormat: @"%i", __cid];
  [ms appendString: @",begin_time:"];
  [ms appendFormat: @"%qi", __begin_time];
  [ms appendString: @",end_time:"];
  [ms appendFormat: @"%qi", __end_time];
  [ms appendString: @",owner:"];
  [ms appendFormat: @"%@", __owner];
  [ms appendString: @",user_apply_list:"];
  [ms appendFormat: @"%@", __user_apply_list];
  [ms appendString: @",user_accept_list:"];
  [ms appendFormat: @"%@", __user_accept_list];
  [ms appendString: @",user_reject_list:"];
  [ms appendFormat: @"%@", __user_reject_list];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TaskList

- (id) initWithNum: (int64_t) num data: (NSArray *) data
{
  self = [super init];
  __num = num;
  __num_isset = YES;
  __data = [data retain];
  __data_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"num"])
  {
    __num = [decoder decodeInt64ForKey: @"num"];
    __num_isset = YES;
  }
  if ([decoder containsValueForKey: @"data"])
  {
    __data = [[decoder decodeObjectForKey: @"data"] retain];
    __data_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__num_isset)
  {
    [encoder encodeInt64: __num forKey: @"num"];
  }
  if (__data_isset)
  {
    [encoder encodeObject: __data forKey: @"data"];
  }
}

- (void) dealloc
{
  [__data release];
  [super dealloc];
}

- (int64_t) num {
  return __num;
}

- (void) setNum: (int64_t) num {
  __num = num;
  __num_isset = YES;
}

- (BOOL) numIsSet {
  return __num_isset;
}

- (void) unsetNum {
  __num_isset = NO;
}

- (NSArray *) data {
  return [[__data retain] autorelease];
}

- (void) setData: (NSArray *) data {
  [data retain];
  [__data release];
  __data = data;
  __data_isset = YES;
}

- (BOOL) dataIsSet {
  return __data_isset;
}

- (void) unsetData {
  [__data release];
  __data = nil;
  __data_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setNum: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size50;
          [inProtocol readListBeginReturningElementType: NULL size: &_size50];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size50];
          int _i51;
          for (_i51 = 0; _i51 < _size50; ++_i51)
          {
            Task *_elem52 = [[Task alloc] init];
            [_elem52 read: inProtocol];
            [fieldValue addObject: _elem52];
            [_elem52 release];
          }
          [inProtocol readListEnd];
          [self setData: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TaskList"];
  if (__num_isset) {
    [outProtocol writeFieldBeginWithName: @"num" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __num];
    [outProtocol writeFieldEnd];
  }
  if (__data_isset) {
    if (__data != nil) {
      [outProtocol writeFieldBeginWithName: @"data" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__data count]];
        int i54;
        for (i54 = 0; i54 < [__data count]; i54++)
        {
          [[__data objectAtIndex: i54] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TaskList("];
  [ms appendString: @"num:"];
  [ms appendFormat: @"%qi", __num];
  [ms appendString: @",data:"];
  [ms appendFormat: @"%@", __data];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Comment

- (id) initWithText: (NSString *) text time: (timestamp) time
{
  self = [super init];
  __text = [text retain];
  __text_isset = YES;
  __time = time;
  __time_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"text"])
  {
    __text = [[decoder decodeObjectForKey: @"text"] retain];
    __text_isset = YES;
  }
  if ([decoder containsValueForKey: @"time"])
  {
    __time = [decoder decodeInt64ForKey: @"time"];
    __time_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__text_isset)
  {
    [encoder encodeObject: __text forKey: @"text"];
  }
  if (__time_isset)
  {
    [encoder encodeInt64: __time forKey: @"time"];
  }
}

- (void) dealloc
{
  [__text release];
  [super dealloc];
}

- (NSString *) text {
  return [[__text retain] autorelease];
}

- (void) setText: (NSString *) text {
  [text retain];
  [__text release];
  __text = text;
  __text_isset = YES;
}

- (BOOL) textIsSet {
  return __text_isset;
}

- (void) unsetText {
  [__text release];
  __text = nil;
  __text_isset = NO;
}

- (int64_t) time {
  return __time;
}

- (void) setTime: (int64_t) time {
  __time = time;
  __time_isset = YES;
}

- (BOOL) timeIsSet {
  return __time_isset;
}

- (void) unsetTime {
  __time_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setText: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Comment"];
  if (__text_isset) {
    if (__text != nil) {
      [outProtocol writeFieldBeginWithName: @"text" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __text];
      [outProtocol writeFieldEnd];
    }
  }
  if (__time_isset) {
    [outProtocol writeFieldBeginWithName: @"time" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __time];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Comment("];
  [ms appendString: @"text:"];
  [ms appendFormat: @"\"%@\"", __text];
  [ms appendString: @",time:"];
  [ms appendFormat: @"%qi", __time];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation CommentList

- (id) initWithNum: (int64_t) num data: (NSArray *) data
{
  self = [super init];
  __num = num;
  __num_isset = YES;
  __data = [data retain];
  __data_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"num"])
  {
    __num = [decoder decodeInt64ForKey: @"num"];
    __num_isset = YES;
  }
  if ([decoder containsValueForKey: @"data"])
  {
    __data = [[decoder decodeObjectForKey: @"data"] retain];
    __data_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__num_isset)
  {
    [encoder encodeInt64: __num forKey: @"num"];
  }
  if (__data_isset)
  {
    [encoder encodeObject: __data forKey: @"data"];
  }
}

- (void) dealloc
{
  [__data release];
  [super dealloc];
}

- (int64_t) num {
  return __num;
}

- (void) setNum: (int64_t) num {
  __num = num;
  __num_isset = YES;
}

- (BOOL) numIsSet {
  return __num_isset;
}

- (void) unsetNum {
  __num_isset = NO;
}

- (NSArray *) data {
  return [[__data retain] autorelease];
}

- (void) setData: (NSArray *) data {
  [data retain];
  [__data release];
  __data = data;
  __data_isset = YES;
}

- (BOOL) dataIsSet {
  return __data_isset;
}

- (void) unsetData {
  [__data release];
  __data = nil;
  __data_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setNum: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size55;
          [inProtocol readListBeginReturningElementType: NULL size: &_size55];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size55];
          int _i56;
          for (_i56 = 0; _i56 < _size55; ++_i56)
          {
            Comment *_elem57 = [[Comment alloc] init];
            [_elem57 read: inProtocol];
            [fieldValue addObject: _elem57];
            [_elem57 release];
          }
          [inProtocol readListEnd];
          [self setData: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"CommentList"];
  if (__num_isset) {
    [outProtocol writeFieldBeginWithName: @"num" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __num];
    [outProtocol writeFieldEnd];
  }
  if (__data_isset) {
    if (__data != nil) {
      [outProtocol writeFieldBeginWithName: @"data" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__data count]];
        int i59;
        for (i59 = 0; i59 < [__data count]; i59++)
        {
          [[__data objectAtIndex: i59] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"CommentList("];
  [ms appendString: @"num:"];
  [ms appendFormat: @"%qi", __num];
  [ms appendString: @",data:"];
  [ms appendFormat: @"%@", __data];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation typeConstants
+ (void) initialize {
}
@end

